{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {}
   },
   "source": [
    "# Tutorial Data Files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import transportation_tutorials as tt\n",
    "import pandas as pd\n",
    "import geopandas as gpd\n",
    "import larch"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {},
    "toc-hr-collapsed": true
   },
   "source": [
    "## Florida Statewide"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {}
   },
   "source": [
    "### Household Income, by County\n",
    "\n",
    "Census data giving a tabulation of household income, by county in Florida.  This data comes from\n",
    "the 2017 5-year [ACS](https://www.census.gov/programs-surveys/acs), \n",
    "[Table B19001](https://censusreporter.org/tables/B19001/)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "pycharm": {
     "metadata": false,
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'ACS_17_5YR_B19001.csv.gz'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(tt.data('ACS_17_5YR_B19001'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [],
   "source": [
    "hhinc = pd.read_csv(tt.data('ACS_17_5YR_B19001'), header=[0,1], index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 67 entries, 0500000US12001 to 0500000US12133\n",
      "Data columns (total 36 columns):\n",
      "(GEO.id2, Id2)                                                 67 non-null int64\n",
      "(GEO.display-label, Geography)                                 67 non-null object\n",
      "(HD01_VD01, Estimate; Total:)                                  67 non-null int64\n",
      "(HD02_VD01, Margin of Error; Total:)                           67 non-null int64\n",
      "(HD01_VD02, Estimate; Total: - Less than $10,000)              67 non-null int64\n",
      "(HD02_VD02, Margin of Error; Total: - Less than $10,000)       67 non-null int64\n",
      "(HD01_VD03, Estimate; Total: - $10,000 to $14,999)             67 non-null int64\n",
      "(HD02_VD03, Margin of Error; Total: - $10,000 to $14,999)      67 non-null int64\n",
      "(HD01_VD04, Estimate; Total: - $15,000 to $19,999)             67 non-null int64\n",
      "(HD02_VD04, Margin of Error; Total: - $15,000 to $19,999)      67 non-null int64\n",
      "(HD01_VD05, Estimate; Total: - $20,000 to $24,999)             67 non-null int64\n",
      "(HD02_VD05, Margin of Error; Total: - $20,000 to $24,999)      67 non-null int64\n",
      "(HD01_VD06, Estimate; Total: - $25,000 to $29,999)             67 non-null int64\n",
      "(HD02_VD06, Margin of Error; Total: - $25,000 to $29,999)      67 non-null int64\n",
      "(HD01_VD07, Estimate; Total: - $30,000 to $34,999)             67 non-null int64\n",
      "(HD02_VD07, Margin of Error; Total: - $30,000 to $34,999)      67 non-null int64\n",
      "(HD01_VD08, Estimate; Total: - $35,000 to $39,999)             67 non-null int64\n",
      "(HD02_VD08, Margin of Error; Total: - $35,000 to $39,999)      67 non-null int64\n",
      "(HD01_VD09, Estimate; Total: - $40,000 to $44,999)             67 non-null int64\n",
      "(HD02_VD09, Margin of Error; Total: - $40,000 to $44,999)      67 non-null int64\n",
      "(HD01_VD10, Estimate; Total: - $45,000 to $49,999)             67 non-null int64\n",
      "(HD02_VD10, Margin of Error; Total: - $45,000 to $49,999)      67 non-null int64\n",
      "(HD01_VD11, Estimate; Total: - $50,000 to $59,999)             67 non-null int64\n",
      "(HD02_VD11, Margin of Error; Total: - $50,000 to $59,999)      67 non-null int64\n",
      "(HD01_VD12, Estimate; Total: - $60,000 to $74,999)             67 non-null int64\n",
      "(HD02_VD12, Margin of Error; Total: - $60,000 to $74,999)      67 non-null int64\n",
      "(HD01_VD13, Estimate; Total: - $75,000 to $99,999)             67 non-null int64\n",
      "(HD02_VD13, Margin of Error; Total: - $75,000 to $99,999)      67 non-null int64\n",
      "(HD01_VD14, Estimate; Total: - $100,000 to $124,999)           67 non-null int64\n",
      "(HD02_VD14, Margin of Error; Total: - $100,000 to $124,999)    67 non-null int64\n",
      "(HD01_VD15, Estimate; Total: - $125,000 to $149,999)           67 non-null int64\n",
      "(HD02_VD15, Margin of Error; Total: - $125,000 to $149,999)    67 non-null int64\n",
      "(HD01_VD16, Estimate; Total: - $150,000 to $199,999)           67 non-null int64\n",
      "(HD02_VD16, Margin of Error; Total: - $150,000 to $199,999)    67 non-null int64\n",
      "(HD01_VD17, Estimate; Total: - $200,000 or more)               67 non-null int64\n",
      "(HD02_VD17, Margin of Error; Total: - $200,000 or more)        67 non-null int64\n",
      "dtypes: int64(35), object(1)\n",
      "memory usage: 19.4+ KB\n"
     ]
    }
   ],
   "source": [
    "hhinc.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {}
   },
   "source": [
    "### County Shapefile\n",
    "\n",
    "This shapefile contains the boundaries of counties in Florida."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Florida_County_Lines.shp'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(tt.data('FL-COUNTY-SHAPE', '*.shp')) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [],
   "source": [
    "fl_county = gpd.read_file(tt.data('FL-COUNTY-SHAPE'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'geopandas.geodataframe.GeoDataFrame'>\n",
      "RangeIndex: 616 entries, 0 to 615\n",
      "Data columns (total 5 columns):\n",
      "OBJECTID     616 non-null int64\n",
      "COASTBND     616 non-null object\n",
      "DATESTAMP    616 non-null object\n",
      "SHAPELEN     616 non-null float64\n",
      "geometry     616 non-null object\n",
      "dtypes: float64(1), int64(1), object(3)\n",
      "memory usage: 24.1+ KB\n"
     ]
    }
   ],
   "source": [
    "fl_county.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = fl_county.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {},
    "toc-hr-collapsed": true
   },
   "source": [
    "## SERPM8 Region\n",
    "\n",
    "The following files include data for the entire SERPM8 region.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {}
   },
   "source": [
    "### TAZ Shapefile\n",
    "\n",
    "This shapefile contains geographic data for travel analysis zones (TAZ)\n",
    "in the SERPM region."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'SERPM8TAZ_NAD83_170502.shp'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(tt.data('SERPM8-TAZSHAPE', '*.shp'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [],
   "source": [
    "taz = gpd.read_file(tt.data('SERPM8-TAZSHAPE'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'geopandas.geodataframe.GeoDataFrame'>\n",
      "RangeIndex: 4236 entries, 0 to 4235\n",
      "Data columns (total 15 columns):\n",
      "OBJECTID      4236 non-null int64\n",
      "TAZ_REG       4236 non-null float64\n",
      "TAZ_OLD05     4236 non-null int64\n",
      "TAZ_MPO       4236 non-null int64\n",
      "COUNTY        4236 non-null float64\n",
      "CENSUSTAZ     1506 non-null object\n",
      "TAZ_BF        4236 non-null int64\n",
      "FIX           4236 non-null int64\n",
      "AREA          4236 non-null float64\n",
      "F_NETAREA     4236 non-null float64\n",
      "CBD           4236 non-null int64\n",
      "HM_ROOMS      4236 non-null int64\n",
      "Shape_Leng    4236 non-null float64\n",
      "Shape_Area    4236 non-null float64\n",
      "geometry      4236 non-null object\n",
      "dtypes: float64(6), int64(7), object(2)\n",
      "memory usage: 496.5+ KB\n"
     ]
    }
   ],
   "source": [
    "taz.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = taz.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {}
   },
   "source": [
    "### MAZ Shapefile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'SERPM8MAZ_NAD83_170502.shp'"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(tt.data('SERPM8-MAZSHAPE', '*.shp'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'geopandas.geodataframe.GeoDataFrame'>\n",
      "RangeIndex: 12022 entries, 0 to 12021\n",
      "Data columns (total 8 columns):\n",
      "OBJECTID      12022 non-null int64\n",
      "MAZ           12022 non-null int64\n",
      "SHAPE_LENG    12022 non-null float64\n",
      "SHAPE_AREA    12022 non-null float64\n",
      "ACRES         12022 non-null int64\n",
      "POINT_X       12022 non-null int64\n",
      "POINT_Y       12022 non-null int64\n",
      "geometry      12022 non-null object\n",
      "dtypes: float64(2), int64(5), object(1)\n",
      "memory usage: 751.5+ KB\n"
     ]
    }
   ],
   "source": [
    "maz = gpd.read_file(tt.data('SERPM8-MAZSHAPE', '*.shp'))\n",
    "maz.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = maz.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {}
   },
   "source": [
    "### MAZ Socio-Economic Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'MAZ_DATA.csv'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(tt.data('SERPM8-MAZDATA', '*.csv'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [],
   "source": [
    "mazd = pd.read_csv(tt.data('SERPM8-MAZDATA', '*.csv'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 12022 entries, 0 to 12021\n",
      "Data columns (total 76 columns):\n",
      "mgra                            12022 non-null int64\n",
      "TAZ                             12022 non-null int64\n",
      "HH                              12022 non-null int64\n",
      "POP                             12022 non-null int64\n",
      "emp_self                        12022 non-null int64\n",
      "emp_ag                          12022 non-null int64\n",
      "emp_const_non_bldg_prod         12022 non-null int64\n",
      "emp_const_non_bldg_office       12022 non-null int64\n",
      "emp_utilities_prod              12022 non-null int64\n",
      "emp_utilities_office            12022 non-null int64\n",
      "emp_const_bldg_prod             12022 non-null int64\n",
      "emp_const_bldg_office           12022 non-null int64\n",
      "emp_mfg_prod                    12022 non-null int64\n",
      "emp_mfg_office                  12022 non-null int64\n",
      "emp_whsle_whs                   12022 non-null int64\n",
      "emp_trans                       12022 non-null int64\n",
      "emp_retail                      12022 non-null int64\n",
      "emp_prof_bus_svcs               12022 non-null int64\n",
      "emp_prof_bus_svcs_bldg_maint    12022 non-null int64\n",
      "emp_pvt_ed_k12                  12022 non-null int64\n",
      "emp_pvt_ed_post_k12_oth         12022 non-null int64\n",
      "emp_health                      12022 non-null int64\n",
      "emp_personal_svcs_office        12022 non-null int64\n",
      "emp_amusement                   12022 non-null int64\n",
      "emp_hotel                       12022 non-null int64\n",
      "emp_restaurant_bar              12022 non-null int64\n",
      "emp_personal_svcs_retail        12022 non-null int64\n",
      "emp_religious                   12022 non-null int64\n",
      "emp_pvt_hh                      12022 non-null int64\n",
      "emp_state_local_gov_ent         12022 non-null int64\n",
      "emp_scrap_other                 12022 non-null int64\n",
      "emp_fed_non_mil                 12022 non-null int64\n",
      "emp_fed_mil                     12022 non-null int64\n",
      "emp_state_local_gov_blue        12022 non-null int64\n",
      "emp_state_local_gov_white       12022 non-null int64\n",
      "emp_public_ed                   12022 non-null int64\n",
      "emp_own_occ_dwell_mgmt          12022 non-null int64\n",
      "emp_fed_gov_accts               12022 non-null int64\n",
      "emp_st_lcl_gov_accts            12022 non-null int64\n",
      "emp_cap_accts                   12022 non-null int64\n",
      "emp_total                       12022 non-null int64\n",
      "collegeEnroll                   12022 non-null int64\n",
      "otherCollegeEnroll              12022 non-null int64\n",
      "AdultSchEnrl                    12022 non-null int64\n",
      "EnrollGradeKto8                 12022 non-null int64\n",
      "EnrollGrade9to12                12022 non-null int64\n",
      "PrivateEnrollGradeKto8          12022 non-null int64\n",
      "ech_dist                        12022 non-null int64\n",
      "hch_dist                        12022 non-null int64\n",
      "parkarea                        12022 non-null int64\n",
      "hstallsoth                      12022 non-null int64\n",
      "hstallssam                      12022 non-null int64\n",
      "hparkcost                       12022 non-null int64\n",
      "numfreehrs                      12022 non-null int64\n",
      "dstallsoth                      12022 non-null int64\n",
      "dstallssam                      12022 non-null int64\n",
      "dparkcost                       12022 non-null int64\n",
      "mstallsoth                      12022 non-null int64\n",
      "mstallssam                      12022 non-null int64\n",
      "mparkcost                       12022 non-null float64\n",
      "TotInt                          12022 non-null int64\n",
      "DUDen                           12022 non-null float64\n",
      "EmpDen                          12022 non-null float64\n",
      "PopDen                          12022 non-null float64\n",
      "RetEmpDen                       12022 non-null float64\n",
      "IntDenBin                       12022 non-null int64\n",
      "EmpDenBin                       12022 non-null int64\n",
      "DuDenBin                        12022 non-null int64\n",
      "POINT_X                         12022 non-null int64\n",
      "POINT_Y                         12022 non-null int64\n",
      "ACRES                           12022 non-null int64\n",
      "HotelRoomTotal                  12022 non-null int64\n",
      "mall_flag                       12022 non-null int64\n",
      "beachAcres                      12022 non-null int64\n",
      "geoSRate                        12022 non-null int64\n",
      "geoSRateNm                      12022 non-null int64\n",
      "dtypes: float64(5), int64(71)\n",
      "memory usage: 7.0 MB\n"
     ]
    }
   ],
   "source": [
    "mazd.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {}
   },
   "source": [
    "### Loaded Highway Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'SERPM8-BASE2015-AM_HLOAD.csv.gz'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(tt.data('SERPM8-BASE2015-AM_HLOAD'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [],
   "source": [
    "hwy = pd.read_csv(tt.data('SERPM8-BASE2015-AM_HLOAD'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 50865 entries, 0 to 50864\n",
      "Columns: 228 entries, Unnamed: 0 to LW_RCTOLLPK\n",
      "dtypes: float64(94), int64(134)\n",
      "memory usage: 88.5 MB\n"
     ]
    }
   ],
   "source": [
    "hwy.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {},
    "toc-hr-collapsed": true
   },
   "source": [
    "## Jupiter Example Study Area\n",
    "\n",
    "The following files include synthetic data that has been generated for\n",
    "the Jupiter Example Study Area.  All data has been generated using the \n",
    "2015 base year scenario.  Note that while this data is *representative*\n",
    "of the data from real people, this is purely synthetic data, and does not\n",
    "show the actual behavior of any real person."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {}
   },
   "source": [
    "### Households\n",
    "\n",
    "Data on synthetic households residing in the Jupiter study area."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'SERPM8-BASE2015-HOUSEHOLDS.csv.gz'"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(tt.data('SERPM8-BASE2015-HOUSEHOLDS'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 18178 entries, 0 to 18177\n",
      "Data columns (total 10 columns):\n",
      "Unnamed: 0      18178 non-null int64\n",
      "hh_id           18178 non-null int64\n",
      "home_mgra       18178 non-null int64\n",
      "income          18178 non-null int64\n",
      "autos           18178 non-null int64\n",
      "transponder     18178 non-null int64\n",
      "cdap_pattern    18178 non-null object\n",
      "jtf_choice      18178 non-null int64\n",
      "autotech        18178 non-null int64\n",
      "tncmemb         18178 non-null int64\n",
      "dtypes: int64(9), object(1)\n",
      "memory usage: 1.4+ MB\n"
     ]
    }
   ],
   "source": [
    "hh = pd.read_csv(tt.data('SERPM8-BASE2015-HOUSEHOLDS'))\n",
    "hh.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {}
   },
   "source": [
    "### Persons\n",
    "\n",
    "Data on synthetic persons residing in the Jupiter study area."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'SERPM8-BASE2015-PERSONS.csv.gz'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(tt.data('SERPM8-BASE2015-PERSONS'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 40683 entries, 0 to 40682\n",
      "Data columns (total 13 columns):\n",
      "hh_id               40683 non-null int64\n",
      "person_id           40683 non-null int64\n",
      "person_num          40683 non-null int64\n",
      "age                 40683 non-null int64\n",
      "gender              40683 non-null object\n",
      "type                40683 non-null object\n",
      "value_of_time       40683 non-null float64\n",
      "activity_pattern    40683 non-null object\n",
      "imf_choice          40683 non-null int64\n",
      "inmf_choice         40683 non-null int64\n",
      "fp_choice           40683 non-null int64\n",
      "reimb_pct           40683 non-null float64\n",
      "wrkr_type           40683 non-null int64\n",
      "dtypes: float64(2), int64(8), object(3)\n",
      "memory usage: 4.0+ MB\n"
     ]
    }
   ],
   "source": [
    "pers = pd.read_csv(tt.data('SERPM8-BASE2015-PERSONS'))\n",
    "pers.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {}
   },
   "source": [
    "### Tours\n",
    "\n",
    "All individual tours made by synthetic persons residing in the Jupiter\n",
    "study area. Note this includes home-based tours that have destinations\n",
    "outside the study area, as well as work-based tours that may be entirely\n",
    "outside the study area."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'SERPM8-BASE2015-TOURS.csv.gz'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(tt.data('SERPM8-BASE2015-TOURS'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 47485 entries, 0 to 47484\n",
      "Data columns (total 61 columns):\n",
      "hh_id            47485 non-null int64\n",
      "person_id        47485 non-null int64\n",
      "person_num       47485 non-null int64\n",
      "person_type      47485 non-null int64\n",
      "tour_id          47485 non-null int64\n",
      "tour_category    47485 non-null object\n",
      "tour_purpose     47485 non-null object\n",
      "orig_mgra        47485 non-null int64\n",
      "dest_mgra        47485 non-null int64\n",
      "start_period     47485 non-null int64\n",
      "end_period       47485 non-null int64\n",
      "tour_mode        47485 non-null int64\n",
      "tour_distance    47485 non-null float64\n",
      "tour_time        47485 non-null float64\n",
      "atWork_freq      47485 non-null int64\n",
      "num_ob_stops     47485 non-null int64\n",
      "num_ib_stops     47485 non-null int64\n",
      "out_btap         47485 non-null int64\n",
      "out_atap         47485 non-null int64\n",
      "in_btap          47485 non-null int64\n",
      "in_atap          47485 non-null int64\n",
      "util_1           47485 non-null float64\n",
      "util_2           47485 non-null float64\n",
      "util_3           47485 non-null float64\n",
      "util_4           47485 non-null float64\n",
      "util_5           47485 non-null float64\n",
      "util_6           47485 non-null float64\n",
      "util_7           47485 non-null float64\n",
      "util_8           47485 non-null float64\n",
      "util_9           47485 non-null float64\n",
      "util_10          47485 non-null float64\n",
      "util_11          47485 non-null float64\n",
      "util_12          47485 non-null float64\n",
      "util_13          47485 non-null float64\n",
      "util_14          47485 non-null float64\n",
      "util_15          47485 non-null float64\n",
      "util_16          47485 non-null float64\n",
      "util_17          47485 non-null float64\n",
      "util_18          47485 non-null float64\n",
      "util_19          47485 non-null float64\n",
      "util_20          47485 non-null float64\n",
      "prob_1           47485 non-null float64\n",
      "prob_2           47485 non-null float64\n",
      "prob_3           47485 non-null float64\n",
      "prob_4           47485 non-null float64\n",
      "prob_5           47485 non-null float64\n",
      "prob_6           47485 non-null float64\n",
      "prob_7           47485 non-null float64\n",
      "prob_8           47485 non-null float64\n",
      "prob_9           47485 non-null float64\n",
      "prob_10          47485 non-null float64\n",
      "prob_11          47485 non-null float64\n",
      "prob_12          47485 non-null float64\n",
      "prob_13          47485 non-null float64\n",
      "prob_14          47485 non-null float64\n",
      "prob_15          47485 non-null float64\n",
      "prob_16          47485 non-null float64\n",
      "prob_17          47485 non-null float64\n",
      "prob_18          47485 non-null float64\n",
      "prob_19          47485 non-null float64\n",
      "prob_20          47485 non-null float64\n",
      "dtypes: float64(42), int64(17), object(2)\n",
      "memory usage: 22.1+ MB\n"
     ]
    }
   ],
   "source": [
    "hh = pd.read_csv(tt.data('SERPM8-BASE2015-TOURS'))\n",
    "hh.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {}
   },
   "source": [
    "### Trips\n",
    "\n",
    "All trips on individual tours made by synthetic persons residing in the\n",
    "Jupiter study area. Note this includes trips that have origins or\n",
    "destinations outside the study area."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'SERPM8-BASE2015-TRIPS.csv.gz'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(tt.data('SERPM8-BASE2015-TRIPS'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 123874 entries, 0 to 123873\n",
      "Data columns (total 20 columns):\n",
      "hh_id              123874 non-null int64\n",
      "person_id          123874 non-null int64\n",
      "person_num         123874 non-null int64\n",
      "tour_id            123874 non-null int64\n",
      "stop_id            123874 non-null int64\n",
      "inbound            123874 non-null int64\n",
      "tour_purpose       123874 non-null object\n",
      "orig_purpose       123874 non-null object\n",
      "dest_purpose       123874 non-null object\n",
      "orig_mgra          123874 non-null int64\n",
      "dest_mgra          123874 non-null int64\n",
      "parking_mgra       123874 non-null int64\n",
      "stop_period        123874 non-null int64\n",
      "trip_mode          123874 non-null int64\n",
      "trip_board_tap     123874 non-null int64\n",
      "trip_alight_tap    123874 non-null int64\n",
      "tour_mode          123874 non-null int64\n",
      "smplRate_geo       123874 non-null float64\n",
      "autotech           123874 non-null int64\n",
      "tncmemb            123874 non-null int64\n",
      "dtypes: float64(1), int64(16), object(3)\n",
      "memory usage: 18.9+ MB\n"
     ]
    }
   ],
   "source": [
    "trips = pd.read_csv(tt.data('SERPM8-BASE2015-TRIPS'))\n",
    "trips.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "pycharm": {}
   },
   "source": [
    "### Highway Skims\n",
    "\n",
    "The tutorial data contains a set of highway skims for the Jupiter example \n",
    "area, in openmatrix (omx) format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'SERPM8-JUPITER-AMHSKIMS.omx'"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(tt.data('SERPM8-JUPITER-AMHSKIMS'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<larch.OMX> ⋯/SERPM8-JUPITER-AMHSKIMS.omx\n",
       " |  shape:(220, 220)\n",
       " |  data:\n",
       " |    AM_DAT_DIST      (float64)\n",
       " |    AM_DAT_FFTIME    (float64)\n",
       " |    AM_DAT_TIME      (float64)\n",
       " |    AM_DAT_TOLLCOST  (float64)\n",
       " |    AM_DAT_TOLLDIST  (float64)\n",
       " |    AM_GP_DIST       (float64)\n",
       " |    AM_GP_FFTIME     (float64)\n",
       " |    AM_GP_TIME       (float64)\n",
       " |    AM_S2NH_DIST     (float64)\n",
       " |    AM_S2NH_FFTIME   (float64)\n",
       " |    AM_S2NH_HOVDIST  (float64)\n",
       " |    AM_S2NH_TIME     (float64)\n",
       " |    AM_S2TH_DIST     (float64)\n",
       " |    AM_S2TH_FFTIME   (float64)\n",
       " |    AM_S2TH_HOVDIST  (float64)\n",
       " |    AM_S2TH_TIME     (float64)\n",
       " |    AM_S2TH_TOLLCOST (float64)\n",
       " |    AM_S2TH_TOLLDIST (float64)\n",
       " |  lookup:\n",
       " |    TAZ_ID (220 int64)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "skims = larch.OMX(tt.data('SERPM8-JUPITER-AMHSKIMS'))\n",
    "skims"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc-hr-collapsed": true
   },
   "source": [
    "## Exampville Simulated Data\n",
    "\n",
    "Exampville is an entirely fictional town built for the express purpose of \n",
    "demostrating the use of discrete choice modeling tools for transportation \n",
    "planning.  The exampville data files are packaged with `Larch`, an open source\n",
    "package for discrete choice models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "import larch.exampville"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TAZ Shapefile"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The shapefile that includes a map of the travel analysis zones\n",
    "in Exampville is stored in a zip file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'exampville_taz.zip'"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(larch.exampville.files.shapefile)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Geopandas can open and read this data directly with unzipping it on\n",
    "disk first, by including the \"zip://\" protocol in front of the filename."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "taz_shape = gpd.read_file(\"zip://\"+larch.exampville.files.shapefile)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "doc_only": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "taz_shape.plot(edgecolor='k');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TAZ Employment Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'exampville_employment.csv.gz'"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(larch.exampville.files.employment)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "emp = pd.read_csv(larch.exampville.files.employment, index_col='TAZ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "doc_only": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 40 entries, 1 to 40\n",
      "Data columns (total 3 columns):\n",
      "NONRETAIL_EMP    40 non-null int64\n",
      "RETAIL_EMP       40 non-null int64\n",
      "TOTAL_EMP        40 non-null int64\n",
      "dtypes: int64(3)\n",
      "memory usage: 1.2 KB\n"
     ]
    }
   ],
   "source": [
    "emp.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Skims"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The network skims for Exampville are stored in open matrix format.\n",
    "Larch includes a OMX reader, which also embeds a number of handy\n",
    "tools for processing OMX data into formats useful for discrete choice\n",
    "analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'exampville_skims.omx'"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(larch.exampville.files.skims)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<larch.OMX> ⋯/exampville_skims.omx\n",
       " |  shape:(40, 40)\n",
       " |  data:\n",
       " |    AUTO_COST    (float64)\n",
       " |    AUTO_DIST    (float64)\n",
       " |    AUTO_TIME    (float64)\n",
       " |    BIKE_TIME    (float64)\n",
       " |    TRANSIT_FARE (float64)\n",
       " |    TRANSIT_IVTT (float64)\n",
       " |    TRANSIT_OVTT (float64)\n",
       " |    WALK_DIST    (float64)\n",
       " |    WALK_TIME    (float64)\n",
       " |  lookup:\n",
       " |    TAZ_ID (40 int64)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "skims = larch.OMX( larch.exampville.files.skims, mode='r' )\n",
    "skims"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Households"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'exampville_households.csv.gz'"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(larch.exampville.files.hh)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "hh = pd.read_csv( larch.exampville.files.hh )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "doc_only": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5000 entries, 0 to 4999\n",
      "Data columns (total 7 columns):\n",
      "X           5000 non-null float64\n",
      "Y           5000 non-null float64\n",
      "INCOME      5000 non-null int64\n",
      "geometry    5000 non-null object\n",
      "HOMETAZ     5000 non-null int64\n",
      "HHSIZE      5000 non-null int64\n",
      "HHID        5000 non-null int64\n",
      "dtypes: float64(2), int64(4), object(1)\n",
      "memory usage: 273.5+ KB\n"
     ]
    }
   ],
   "source": [
    "hh.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Persons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'exampville_persons.csv.gz'"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(larch.exampville.files.person)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "pp = pd.read_csv( larch.exampville.files.person )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "doc_only": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9146 entries, 0 to 9145\n",
      "Data columns (total 8 columns):\n",
      "PERSONID         9146 non-null int64\n",
      "HHID             9146 non-null int64\n",
      "HHIDX            9146 non-null int64\n",
      "AGE              9146 non-null int64\n",
      "WORKS            9146 non-null int64\n",
      "N_WORK_TOURS     9146 non-null int64\n",
      "N_OTHER_TOURS    9146 non-null int64\n",
      "N_TOURS          9146 non-null int64\n",
      "dtypes: int64(8)\n",
      "memory usage: 571.7 KB\n"
     ]
    }
   ],
   "source": [
    "pp.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tours"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'exampville_tours.csv.gz'"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(larch.exampville.files.tour)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "tour = pd.read_csv( larch.exampville.files.tour )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "doc_only": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 15934 entries, 0 to 15933\n",
      "Data columns (total 6 columns):\n",
      "TOURID      15934 non-null int64\n",
      "HHID        15934 non-null int64\n",
      "PERSONID    15934 non-null int64\n",
      "DTAZ        15934 non-null int64\n",
      "TOURMODE    15934 non-null int64\n",
      "TOURPURP    15934 non-null int64\n",
      "dtypes: int64(6)\n",
      "memory usage: 747.0 KB\n"
     ]
    }
   ],
   "source": [
    "tour.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Miscellaneous Other Files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "pycharm": {}
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'THIS-FILE-IS-CORRUPT.csv.gz'"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.path.basename(tt.data('THIS-FILE-IS-CORRUPT'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b'\"Name\",\"2019 Population\",\"Growth Since 2010\"\\n\"Miami-Dade County\",2751796,9.754517738314988\\n\"Broward County\",1935878,10.438146461848802\\n\"Palm Beach County\",1471150,11.134781186520442\\n\"Hillsborough County\",1408566,14.187346024545278\\n\"Orange County\",1348975,17.43533537158656\\n\"Pinellas County\",970637,5.908084103481755\\n\"Duval County\",937934,8.349130546785744\\n\"Lee County\",739224,19.13993814336621\\n\"Polk County\",686483,13.819128387508599\\n\"Brevard County\",589162,8.306616468373605\\n\"Volusia County\",538692,8.949041751947647\\n\"Pasco County\",525643,12.922511761799399\\n\"Seminole County\",462659,9.358845567465991\\n\"Sarasota County\",419119,10.310730002316134\\n\"Manatee County\",385571,19.209804630857747\\n\"Collier County\",372880,15.585506554536408\\n\"Marion County\",354353,6.94414264329518\\n\"Osceola County\",352180,30.50857507077953\\n\"Lake County\",346017,16.228535726762146\\n\"Escambia County\",313512,5.19266128924022\\n\"St. Lucie Count\\x97\\xef\\x88\\xf5;\\xd6\\r\\xa7\\xf3\\x9d\\xd9\\xf4\\xbd\\xaeZt\\xb2\\x88\\xfb\\xc8(\\xb5\\xb4\\r\\xf1%\\xc05\\xb4BM\\xc1\\xe3\\xb4\\xad\\xd45\\xb1:M\\x00s|\\x0f\\xd9\\x0eA\\xb5\\xa4\\xcb>\\xc28\\xeb\\x89\\x9b\\x1aR\\xb8v\\xc7\\xc8\\x84\\x804\"^\\xf2\\xd0\\xad\\x8ar\\x0c\\xf59\\xdfU\\xad\\xafo\\xae\\xe2\\x0c\\xc4\\xce94\\xba\\xdco\\xdf<\\x840\\r\\x97#\\xaf\\xe0\\xcb\\xcbf\\xed\\x02\\xbe\\xf1\\x18\\xb8Fm\\x80\\xb0:3\\x1d\\x02'\n"
     ]
    }
   ],
   "source": [
    "import gzip\n",
    "with gzip.open(tt.data('THIS-FILE-IS-CORRUPT'), 'rb') as f:\n",
    "    print(f.read())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
