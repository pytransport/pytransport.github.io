{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Frequency Plots and Bar Charts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import transportation_tutorials as tt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Questions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Which county has the highest number of structurally deficient bridges? \n",
    "   Use a frequency plot to find your answer. \n",
    "2. Which county has the lowest percentage of bridges that are in good \n",
    "   condition? Use a bar chart to find your answer. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data\n",
    "\n",
    "To answer the questions, use the following data files:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "bridge = pd.read_csv(tt.data('FL-BRIDGES'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>County</th>\n",
       "      <th>Total #</th>\n",
       "      <th>Good #</th>\n",
       "      <th>Fair #</th>\n",
       "      <th>Poor #</th>\n",
       "      <th>SD #</th>\n",
       "      <th>Total Area</th>\n",
       "      <th>Good Area</th>\n",
       "      <th>Fair Area</th>\n",
       "      <th>Poor Area</th>\n",
       "      <th>SD Area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ALACHUA (001)</td>\n",
       "      <td>111</td>\n",
       "      <td>64</td>\n",
       "      <td>47</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>64767</td>\n",
       "      <td>55794</td>\n",
       "      <td>8973</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>BAKER (003)</td>\n",
       "      <td>89</td>\n",
       "      <td>30</td>\n",
       "      <td>52</td>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>32162</td>\n",
       "      <td>19369</td>\n",
       "      <td>12282</td>\n",
       "      <td>510.0</td>\n",
       "      <td>623.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BAY (005)</td>\n",
       "      <td>122</td>\n",
       "      <td>49</td>\n",
       "      <td>63</td>\n",
       "      <td>10</td>\n",
       "      <td>11</td>\n",
       "      <td>210039</td>\n",
       "      <td>98834</td>\n",
       "      <td>109628</td>\n",
       "      <td>1577.0</td>\n",
       "      <td>10120.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BRADFORD (007)</td>\n",
       "      <td>62</td>\n",
       "      <td>23</td>\n",
       "      <td>37</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>9330</td>\n",
       "      <td>5492</td>\n",
       "      <td>3217</td>\n",
       "      <td>620.0</td>\n",
       "      <td>620.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>BREVARD (009)</td>\n",
       "      <td>241</td>\n",
       "      <td>160</td>\n",
       "      <td>81</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>364138</td>\n",
       "      <td>204179</td>\n",
       "      <td>159959</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           County  Total #  Good #  Fair # Poor # SD #  Total Area  Good Area  \\\n",
       "0   ALACHUA (001)      111      64      47      -    -       64767      55794   \n",
       "1     BAKER (003)       89      30      52      7    8       32162      19369   \n",
       "2       BAY (005)      122      49      63     10   11      210039      98834   \n",
       "3  BRADFORD (007)       62      23      37      2    2        9330       5492   \n",
       "4   BREVARD (009)      241     160      81      -    -      364138     204179   \n",
       "\n",
       "   Fair Area  Poor Area  SD Area  \n",
       "0       8973        NaN      NaN  \n",
       "1      12282      510.0    623.0  \n",
       "2     109628     1577.0  10120.0  \n",
       "3       3217      620.0    620.0  \n",
       "4     159959        NaN      NaN  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bridge.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['County', 'Total #', 'Good #', 'Fair #', 'Poor #', 'SD #', 'Total Area',\n",
       "       'Good Area', 'Fair Area', 'Poor Area', 'SD Area'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bridge.columns"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
