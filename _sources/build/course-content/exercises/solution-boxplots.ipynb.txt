{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Boxplots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import transportation_tutorials as tt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Questions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Use a boxplot to show the distribution of household income in the Jupiter study area, \n",
    "   by number of automobiles owned.  What is the median income of households who own \n",
    "   exactly two automobiles?  *(Hint: the correct answer is \\$96 thousand.)*\n",
    "2. Is the median income higher or lower if we only consider two-car households that\n",
    "   have at least one person over age 65?  Create a set of box plots similar to those\n",
    "   created in question (1), but only for households with at least one person over age 65."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data\n",
    "\n",
    "To answer the questions, use the following data files:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>hh_id</th>\n",
       "      <th>home_mgra</th>\n",
       "      <th>income</th>\n",
       "      <th>autos</th>\n",
       "      <th>transponder</th>\n",
       "      <th>cdap_pattern</th>\n",
       "      <th>jtf_choice</th>\n",
       "      <th>autotech</th>\n",
       "      <th>tncmemb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>426629</td>\n",
       "      <td>1690841</td>\n",
       "      <td>7736</td>\n",
       "      <td>512000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>MMMM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>426630</td>\n",
       "      <td>1690961</td>\n",
       "      <td>7736</td>\n",
       "      <td>27500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>MNMM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>426631</td>\n",
       "      <td>1690866</td>\n",
       "      <td>7736</td>\n",
       "      <td>150000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>HMM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>426632</td>\n",
       "      <td>1690895</td>\n",
       "      <td>7736</td>\n",
       "      <td>104000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>MMMM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>426633</td>\n",
       "      <td>1690933</td>\n",
       "      <td>7736</td>\n",
       "      <td>95000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>MNM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0    hh_id  home_mgra  income  autos  transponder cdap_pattern  \\\n",
       "0      426629  1690841       7736  512000      2            1        MMMM0   \n",
       "1      426630  1690961       7736   27500      1            0        MNMM0   \n",
       "2      426631  1690866       7736  150000      2            0         HMM0   \n",
       "3      426632  1690895       7736  104000      2            1        MMMM0   \n",
       "4      426633  1690933       7736   95000      2            1         MNM0   \n",
       "\n",
       "   jtf_choice  autotech  tncmemb  \n",
       "0           0         0        0  \n",
       "1           0         0        0  \n",
       "2           0         0        0  \n",
       "3           0         0        0  \n",
       "4           0         0        0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh = pd.read_csv(tt.data('SERPM8-BASE2015-HOUSEHOLDS'))\n",
    "hh.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hh_id</th>\n",
       "      <th>person_id</th>\n",
       "      <th>person_num</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>type</th>\n",
       "      <th>value_of_time</th>\n",
       "      <th>activity_pattern</th>\n",
       "      <th>imf_choice</th>\n",
       "      <th>inmf_choice</th>\n",
       "      <th>fp_choice</th>\n",
       "      <th>reimb_pct</th>\n",
       "      <th>wrkr_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1690841</td>\n",
       "      <td>4502948</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>m</td>\n",
       "      <td>Full-time worker</td>\n",
       "      <td>5.072472</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1690841</td>\n",
       "      <td>4502949</td>\n",
       "      <td>2</td>\n",
       "      <td>47</td>\n",
       "      <td>f</td>\n",
       "      <td>Part-time worker</td>\n",
       "      <td>5.072472</td>\n",
       "      <td>M</td>\n",
       "      <td>2</td>\n",
       "      <td>37</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1690841</td>\n",
       "      <td>4502950</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>f</td>\n",
       "      <td>Student of non-driving age</td>\n",
       "      <td>3.381665</td>\n",
       "      <td>M</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1690841</td>\n",
       "      <td>4502951</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>m</td>\n",
       "      <td>Student of non-driving age</td>\n",
       "      <td>3.381665</td>\n",
       "      <td>M</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1690961</td>\n",
       "      <td>4503286</td>\n",
       "      <td>1</td>\n",
       "      <td>52</td>\n",
       "      <td>m</td>\n",
       "      <td>Part-time worker</td>\n",
       "      <td>2.447870</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     hh_id  person_id  person_num  age gender                        type  \\\n",
       "0  1690841    4502948           1   46      m            Full-time worker   \n",
       "1  1690841    4502949           2   47      f            Part-time worker   \n",
       "2  1690841    4502950           3   11      f  Student of non-driving age   \n",
       "3  1690841    4502951           4    8      m  Student of non-driving age   \n",
       "4  1690961    4503286           1   52      m            Part-time worker   \n",
       "\n",
       "   value_of_time activity_pattern  imf_choice  inmf_choice  fp_choice  \\\n",
       "0       5.072472                M           1            1         -1   \n",
       "1       5.072472                M           2           37         -1   \n",
       "2       3.381665                M           3            1         -1   \n",
       "3       3.381665                M           3            1         -1   \n",
       "4       2.447870                M           1            2         -1   \n",
       "\n",
       "   reimb_pct  wrkr_type  \n",
       "0        0.0          0  \n",
       "1        0.0          0  \n",
       "2        0.0          0  \n",
       "3        0.0          0  \n",
       "4        0.0          0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "person = pd.read_csv(tt.data('SERPM8-BASE2015-PERSONS'))\n",
    "person.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To answer the first question, we create a boxplot using two columns in `hh` dataframe : `income` and `autos`. But before that, let's filter the records to remove those where incomes are reported as zero or unavailable. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "hh = hh[(hh.income > 0) & (hh.income != 0)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The we can draw the boxplot.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "hh_box_1 = list(hh.groupby('autos').income)\n",
    "plt.boxplot(\n",
    "    [i[1] for i in hh_box_1], \n",
    "    vert = False, \n",
    "    labels = [i[0] for i in hh_box_1], \n",
    "    notch = True, \n",
    "    widths = 0.6,\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a bit hard to read, as the long tails of very high income households are filling up the figure.\n",
    "We can fix this by clipping the x-axis range, and we can also add some labels to explain what\n",
    "we're looking at."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(\n",
    "    [i[1] for i in hh_box_1], \n",
    "    vert = False, \n",
    "    labels = [i[0] for i in hh_box_1], \n",
    "    notch = True, \n",
    "    widths = 0.6,\n",
    ")\n",
    "plt.xlim(-10000, 200000)\n",
    "plt.title('Household Income by Number of Autos')\n",
    "plt.xlabel('Household Income')\n",
    "plt.ylabel('Autos');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this figure, we can more clearly see the median income of households with 2 autos is slightly lower \n",
    "than \\$100,000. The actual value of \\$96,000 can be found more exactly using the `median` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "96000.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.median(hh[hh.autos == 2].income)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's move on to the second question. First, we use `person` dataframe to calculate total maximum age for each household using the `.groupby()` method. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_age = person.groupby(['hh_id'])['age'].max().rename('max_age')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, we merge the ages with household information \n",
    "to obtain our final dataset and perform some basic \n",
    "filtering to satisfy the conditions. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "hh_2 = pd.merge(hh, max_age, on='hh_id', how='left')\n",
    "hh_2 = hh_2[(hh_2.max_age > 65) & (hh_2.income > 0)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>hh_id</th>\n",
       "      <th>home_mgra</th>\n",
       "      <th>income</th>\n",
       "      <th>autos</th>\n",
       "      <th>transponder</th>\n",
       "      <th>cdap_pattern</th>\n",
       "      <th>jtf_choice</th>\n",
       "      <th>autotech</th>\n",
       "      <th>tncmemb</th>\n",
       "      <th>max_age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>426638</td>\n",
       "      <td>1690921</td>\n",
       "      <td>7736</td>\n",
       "      <td>329000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>NN0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>426641</td>\n",
       "      <td>1690904</td>\n",
       "      <td>7736</td>\n",
       "      <td>169750</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>MM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>426649</td>\n",
       "      <td>1690940</td>\n",
       "      <td>7736</td>\n",
       "      <td>22300</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>MHM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>426650</td>\n",
       "      <td>1690965</td>\n",
       "      <td>7736</td>\n",
       "      <td>427400</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>NMj</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>426657</td>\n",
       "      <td>1691054</td>\n",
       "      <td>7737</td>\n",
       "      <td>289000</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>NNj</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Unnamed: 0    hh_id  home_mgra  income  autos  transponder cdap_pattern  \\\n",
       "9       426638  1690921       7736  329000      2            0          NN0   \n",
       "12      426641  1690904       7736  169750      2            1          MM0   \n",
       "20      426649  1690940       7736   22300      1            0         MHM0   \n",
       "21      426650  1690965       7736  427400      3            1          NMj   \n",
       "28      426657  1691054       7737  289000      3            1          NNj   \n",
       "\n",
       "    jtf_choice  autotech  tncmemb  max_age  \n",
       "9            0         0        0       84  \n",
       "12           0         0        0       66  \n",
       "20           0         0        0       68  \n",
       "21          13         0        0       74  \n",
       "28           4         0        0       67  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh_2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are now ready to prepare the boxplot and find the answer. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "hh_box_2 = list(hh_2.groupby('autos').income)\n",
    "plt.boxplot(\n",
    "    [i[1] for i in hh_box_2], \n",
    "    vert = False, \n",
    "    labels = [str(i[0])+\"*\" for i in hh_box_2], \n",
    "    notch = True, \n",
    "    widths = 0.6,\n",
    ")\n",
    "plt.xlim(-10000,200000)\n",
    "plt.title('Household Income by Number of Autos')\n",
    "plt.xlabel('Household Income')\n",
    "plt.ylabel('Autos');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The median income of households who have 2 cars *and* have a person over 65 is less than \n",
    "for all households with 2 cars.\n",
    "The exact value can be confirmed numerically:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "92100.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh_2[hh_2.autos == 2].income.median()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While more complicated to draw, iterleaving both sets of boxplots\n",
    "in the same plot makes comparisons between the full population and\n",
    "the set of households with at least one person over 65 even easier to see:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(\n",
    "    [i[1] for i in hh_box_1], \n",
    "    vert = False, \n",
    "    labels = [i[0] for i in hh_box_1], \n",
    "    notch = True, \n",
    "    widths = 0.6,\n",
    "    positions = range(2, (len(hh_box_2))*2+2, 2),\n",
    ")\n",
    "\n",
    "hh_box_2 = list(hh_2.groupby('autos').income)\n",
    "plt.boxplot(\n",
    "    [i[1] for i in hh_box_2], \n",
    "    vert = False, \n",
    "    labels = [str(i[0])+\"*\" for i in hh_box_2], \n",
    "    notch = True, \n",
    "    widths = 0.6,\n",
    "    positions = range(1, (len(hh_box_2))*2+1, 2),\n",
    "    boxprops=dict(color=\"red\"),\n",
    "    whiskerprops=dict(color=\"red\"),\n",
    "    capprops=dict(color=\"red\"),\n",
    "    flierprops=dict(markeredgecolor=\"red\"),\n",
    ")\n",
    "plt.xlim(-10000,200000)\n",
    "plt.title('Household Income by Number of Autos')\n",
    "plt.xlabel('Household Income')\n",
    "plt.ylabel('Autos');"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
