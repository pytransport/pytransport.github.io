{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Heatmaps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import transportation_tutorials as tt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "pd.options.display.max_columns = 100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Questions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Prepare a heatmap that visualizes the joint distribution of the number of trips taken by\n",
    "each household and the number of automobiles owned by the household.\n",
    "\n",
    "1. For households with 2 automobiles, what is the most frequent number of trips made by\n",
    "   those households in the data?\n",
    "2. For households making 2 trips in the data, how many automobiles do most households own?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data\n",
    "\n",
    "To answer the questions, use the following data files:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hh_id</th>\n",
       "      <th>person_id</th>\n",
       "      <th>person_num</th>\n",
       "      <th>tour_id</th>\n",
       "      <th>stop_id</th>\n",
       "      <th>inbound</th>\n",
       "      <th>tour_purpose</th>\n",
       "      <th>orig_purpose</th>\n",
       "      <th>dest_purpose</th>\n",
       "      <th>orig_mgra</th>\n",
       "      <th>dest_mgra</th>\n",
       "      <th>parking_mgra</th>\n",
       "      <th>stop_period</th>\n",
       "      <th>trip_mode</th>\n",
       "      <th>trip_board_tap</th>\n",
       "      <th>trip_alight_tap</th>\n",
       "      <th>tour_mode</th>\n",
       "      <th>smplRate_geo</th>\n",
       "      <th>autotech</th>\n",
       "      <th>tncmemb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1690841</td>\n",
       "      <td>4502948</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>Work</td>\n",
       "      <td>Home</td>\n",
       "      <td>Work</td>\n",
       "      <td>7736</td>\n",
       "      <td>9290</td>\n",
       "      <td>-1</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1690841</td>\n",
       "      <td>4502948</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>Work</td>\n",
       "      <td>Work</td>\n",
       "      <td>Home</td>\n",
       "      <td>9290</td>\n",
       "      <td>7736</td>\n",
       "      <td>0</td>\n",
       "      <td>29</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1690841</td>\n",
       "      <td>4502948</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>Work-Based</td>\n",
       "      <td>Work</td>\n",
       "      <td>Work-Based</td>\n",
       "      <td>9290</td>\n",
       "      <td>7980</td>\n",
       "      <td>-1</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1690841</td>\n",
       "      <td>4502948</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>Work-Based</td>\n",
       "      <td>Work-Based</td>\n",
       "      <td>Work</td>\n",
       "      <td>7980</td>\n",
       "      <td>9290</td>\n",
       "      <td>-1</td>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1690841</td>\n",
       "      <td>4502948</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>Work-Based</td>\n",
       "      <td>Work</td>\n",
       "      <td>Work-Based</td>\n",
       "      <td>9290</td>\n",
       "      <td>10608</td>\n",
       "      <td>-1</td>\n",
       "      <td>19</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     hh_id  person_id  person_num  tour_id  stop_id  inbound tour_purpose  \\\n",
       "0  1690841    4502948           1        0       -1        0         Work   \n",
       "1  1690841    4502948           1        0       -1        1         Work   \n",
       "2  1690841    4502948           1        1       -1        0   Work-Based   \n",
       "3  1690841    4502948           1        1       -1        1   Work-Based   \n",
       "4  1690841    4502948           1        2       -1        0   Work-Based   \n",
       "\n",
       "  orig_purpose dest_purpose  orig_mgra  dest_mgra  parking_mgra  stop_period  \\\n",
       "0         Home         Work       7736       9290            -1            8   \n",
       "1         Work         Home       9290       7736             0           29   \n",
       "2         Work   Work-Based       9290       7980            -1           13   \n",
       "3   Work-Based         Work       7980       9290            -1           14   \n",
       "4         Work   Work-Based       9290      10608            -1           19   \n",
       "\n",
       "   trip_mode  trip_board_tap  trip_alight_tap  tour_mode  smplRate_geo  \\\n",
       "0          6               0                0          6           1.0   \n",
       "1          3               0                0          6           1.0   \n",
       "2          1               0                0          1           1.0   \n",
       "3          1               0                0          1           1.0   \n",
       "4          3               0                0          3           1.0   \n",
       "\n",
       "   autotech  tncmemb  \n",
       "0         0        0  \n",
       "1         0        0  \n",
       "2         0        0  \n",
       "3         0        0  \n",
       "4         0        0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trip = pd.read_csv(tt.data('SERPM8-BASE2015-TRIPS'))\n",
    "trip.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>hh_id</th>\n",
       "      <th>home_mgra</th>\n",
       "      <th>income</th>\n",
       "      <th>autos</th>\n",
       "      <th>transponder</th>\n",
       "      <th>cdap_pattern</th>\n",
       "      <th>jtf_choice</th>\n",
       "      <th>autotech</th>\n",
       "      <th>tncmemb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>426629</td>\n",
       "      <td>1690841</td>\n",
       "      <td>7736</td>\n",
       "      <td>512000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>MMMM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>426630</td>\n",
       "      <td>1690961</td>\n",
       "      <td>7736</td>\n",
       "      <td>27500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>MNMM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>426631</td>\n",
       "      <td>1690866</td>\n",
       "      <td>7736</td>\n",
       "      <td>150000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>HMM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>426632</td>\n",
       "      <td>1690895</td>\n",
       "      <td>7736</td>\n",
       "      <td>104000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>MMMM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>426633</td>\n",
       "      <td>1690933</td>\n",
       "      <td>7736</td>\n",
       "      <td>95000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>MNM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0    hh_id  home_mgra  income  autos  transponder cdap_pattern  \\\n",
       "0      426629  1690841       7736  512000      2            1        MMMM0   \n",
       "1      426630  1690961       7736   27500      1            0        MNMM0   \n",
       "2      426631  1690866       7736  150000      2            0         HMM0   \n",
       "3      426632  1690895       7736  104000      2            1        MMMM0   \n",
       "4      426633  1690933       7736   95000      2            1         MNM0   \n",
       "\n",
       "   jtf_choice  autotech  tncmemb  \n",
       "0           0         0        0  \n",
       "1           0         0        0  \n",
       "2           0         0        0  \n",
       "3           0         0        0  \n",
       "4           0         0        0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh = pd.read_csv(tt.data('SERPM8-BASE2015-HOUSEHOLDS'))\n",
    "hh.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To find the number of trips that each household makes, we can create a dummy column with value `1` and use `.groupby()` method to count the total number of trips for each household. Then, we merge this information with household information to get the final dataframe. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "hh_trip_count = trip.groupby(['hh_id']).size().rename('trip_count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "hh_id\n",
       "1690841    20\n",
       "1690851    12\n",
       "1690853     8\n",
       "1690856    23\n",
       "1690858     5\n",
       "Name: trip_count, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh_trip_count.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.merge(hh_trip_count, hh, on = 'hh_id', how = 'left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hh_id</th>\n",
       "      <th>trip_count</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>home_mgra</th>\n",
       "      <th>income</th>\n",
       "      <th>autos</th>\n",
       "      <th>transponder</th>\n",
       "      <th>cdap_pattern</th>\n",
       "      <th>jtf_choice</th>\n",
       "      <th>autotech</th>\n",
       "      <th>tncmemb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1690841</td>\n",
       "      <td>20</td>\n",
       "      <td>426629</td>\n",
       "      <td>7736</td>\n",
       "      <td>512000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>MMMM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1690851</td>\n",
       "      <td>12</td>\n",
       "      <td>426645</td>\n",
       "      <td>7736</td>\n",
       "      <td>68200</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>HNM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1690853</td>\n",
       "      <td>8</td>\n",
       "      <td>426643</td>\n",
       "      <td>7736</td>\n",
       "      <td>127000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>MMMH0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1690856</td>\n",
       "      <td>23</td>\n",
       "      <td>426642</td>\n",
       "      <td>7736</td>\n",
       "      <td>59500</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>MNMMMM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1690858</td>\n",
       "      <td>5</td>\n",
       "      <td>426640</td>\n",
       "      <td>7736</td>\n",
       "      <td>200030</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>M0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     hh_id  trip_count  Unnamed: 0  home_mgra  income  autos  transponder  \\\n",
       "0  1690841          20      426629       7736  512000      2            1   \n",
       "1  1690851          12      426645       7736   68200      4            1   \n",
       "2  1690853           8      426643       7736  127000      2            0   \n",
       "3  1690856          23      426642       7736   59500      4            1   \n",
       "4  1690858           5      426640       7736  200030      1            0   \n",
       "\n",
       "  cdap_pattern  jtf_choice  autotech  tncmemb  \n",
       "0        MMMM0           0         0        0  \n",
       "1         HNM0           0         0        0  \n",
       "2        MMMH0           0         0        0  \n",
       "3      MNMMMM0           0         0        0  \n",
       "4           M0           0         0        0  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 17260 entries, 0 to 17259\n",
      "Data columns (total 11 columns):\n",
      "hh_id           17260 non-null int64\n",
      "trip_count      17260 non-null int64\n",
      "Unnamed: 0      17260 non-null int64\n",
      "home_mgra       17260 non-null int64\n",
      "income          17260 non-null int64\n",
      "autos           17260 non-null int64\n",
      "transponder     17260 non-null int64\n",
      "cdap_pattern    17260 non-null object\n",
      "jtf_choice      17260 non-null int64\n",
      "autotech        17260 non-null int64\n",
      "tncmemb         17260 non-null int64\n",
      "dtypes: int64(10), object(1)\n",
      "memory usage: 1.6+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we create a pivot table using `autos` and `trip_count` columns in the dataframe as `index` and `columns` in `.pivot_table()` method. We use `aggfunc = 'size'` to get the count of households in this two-dimensional table. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_pivot = data.pivot_table(index = 'autos', columns = 'trip_count', aggfunc = 'size')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we create a heatmap using `seaborn` package. We can adjust the height and width of the heatmap using `plt.figure(figsize = (width, height))`. Please make sure to specify the figure size before creating heatmap. \n",
    "\n",
    "We can set `annot = True` in `sns.heatmap()` to get the numbers visible in the plot. Also, there are some other arguments that we can specify to get the heatmap in desirable format. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (25, 3))\n",
    "ax = sns.heatmap(data_pivot.fillna(0), annot = True, fmt = \",.0f\", linewidths=.5, cmap = 'OrRd')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the heatmap that we just created, we can easily find answers looking at the numbers as well as color map. \n",
    "\n",
    "For households with 2 automobiles, 6 is the most common number of trips per day, although 4 trips is a close runner-up.\n",
    "\n",
    "For households making only 2 trips in a day, the vast majority of them have 1 automobile."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
