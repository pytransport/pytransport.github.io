{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import transportation_tutorials as tt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Construct an ordinary least squares linear regression model \n",
    "to predict the given value of time for each individual in the \n",
    "Jupiter study area data as a function of:\n",
    "- age, \n",
    "- gender, \n",
    "- full-time employment status, and \n",
    "- household income.\n",
    "\n",
    "Evaluate this model to answer the questions:\n",
    "\n",
    "1. What are the coefficients on this model?\n",
    "2. Do any of these factors appear to actually be not relevant in determining\n",
    "   an individual's value of time? *(Hint: Gender)*\n",
    "3. If other variables from the household and person datasets could also\n",
    "   be included in the OLS model specificiation, are there any that are\n",
    "   also significant? *(Hint: Yes, there is at least one other relevant \n",
    "   factor in this data.)*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data\n",
    "\n",
    "To answer the questions, use the following data files:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "per = pd.read_csv(tt.data('SERPM8-BASE2015-PERSONS'))\n",
    "hh = pd.read_csv(tt.data('SERPM8-BASE2015-HOUSEHOLDS'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hh_id</th>\n",
       "      <th>person_id</th>\n",
       "      <th>person_num</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>type</th>\n",
       "      <th>value_of_time</th>\n",
       "      <th>activity_pattern</th>\n",
       "      <th>imf_choice</th>\n",
       "      <th>inmf_choice</th>\n",
       "      <th>fp_choice</th>\n",
       "      <th>reimb_pct</th>\n",
       "      <th>wrkr_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1690841</td>\n",
       "      <td>4502948</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>m</td>\n",
       "      <td>Full-time worker</td>\n",
       "      <td>5.072472</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1690841</td>\n",
       "      <td>4502949</td>\n",
       "      <td>2</td>\n",
       "      <td>47</td>\n",
       "      <td>f</td>\n",
       "      <td>Part-time worker</td>\n",
       "      <td>5.072472</td>\n",
       "      <td>M</td>\n",
       "      <td>2</td>\n",
       "      <td>37</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1690841</td>\n",
       "      <td>4502950</td>\n",
       "      <td>3</td>\n",
       "      <td>11</td>\n",
       "      <td>f</td>\n",
       "      <td>Student of non-driving age</td>\n",
       "      <td>3.381665</td>\n",
       "      <td>M</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1690841</td>\n",
       "      <td>4502951</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>m</td>\n",
       "      <td>Student of non-driving age</td>\n",
       "      <td>3.381665</td>\n",
       "      <td>M</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1690961</td>\n",
       "      <td>4503286</td>\n",
       "      <td>1</td>\n",
       "      <td>52</td>\n",
       "      <td>m</td>\n",
       "      <td>Part-time worker</td>\n",
       "      <td>2.447870</td>\n",
       "      <td>M</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     hh_id  person_id  person_num  age gender                        type  \\\n",
       "0  1690841    4502948           1   46      m            Full-time worker   \n",
       "1  1690841    4502949           2   47      f            Part-time worker   \n",
       "2  1690841    4502950           3   11      f  Student of non-driving age   \n",
       "3  1690841    4502951           4    8      m  Student of non-driving age   \n",
       "4  1690961    4503286           1   52      m            Part-time worker   \n",
       "\n",
       "   value_of_time activity_pattern  imf_choice  inmf_choice  fp_choice  \\\n",
       "0       5.072472                M           1            1         -1   \n",
       "1       5.072472                M           2           37         -1   \n",
       "2       3.381665                M           3            1         -1   \n",
       "3       3.381665                M           3            1         -1   \n",
       "4       2.447870                M           1            2         -1   \n",
       "\n",
       "   reimb_pct  wrkr_type  \n",
       "0        0.0          0  \n",
       "1        0.0          0  \n",
       "2        0.0          0  \n",
       "3        0.0          0  \n",
       "4        0.0          0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "per.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>hh_id</th>\n",
       "      <th>home_mgra</th>\n",
       "      <th>income</th>\n",
       "      <th>autos</th>\n",
       "      <th>transponder</th>\n",
       "      <th>cdap_pattern</th>\n",
       "      <th>jtf_choice</th>\n",
       "      <th>autotech</th>\n",
       "      <th>tncmemb</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>426629</td>\n",
       "      <td>1690841</td>\n",
       "      <td>7736</td>\n",
       "      <td>512000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>MMMM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>426630</td>\n",
       "      <td>1690961</td>\n",
       "      <td>7736</td>\n",
       "      <td>27500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>MNMM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>426631</td>\n",
       "      <td>1690866</td>\n",
       "      <td>7736</td>\n",
       "      <td>150000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>HMM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>426632</td>\n",
       "      <td>1690895</td>\n",
       "      <td>7736</td>\n",
       "      <td>104000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>MMMM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>426633</td>\n",
       "      <td>1690933</td>\n",
       "      <td>7736</td>\n",
       "      <td>95000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>MNM0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0    hh_id  home_mgra  income  autos  transponder cdap_pattern  \\\n",
       "0      426629  1690841       7736  512000      2            1        MMMM0   \n",
       "1      426630  1690961       7736   27500      1            0        MNMM0   \n",
       "2      426631  1690866       7736  150000      2            0         HMM0   \n",
       "3      426632  1690895       7736  104000      2            1        MMMM0   \n",
       "4      426633  1690933       7736   95000      2            1         MNM0   \n",
       "\n",
       "   jtf_choice  autotech  tncmemb  \n",
       "0           0         0        0  \n",
       "1           0         0        0  \n",
       "2           0         0        0  \n",
       "3           0         0        0  \n",
       "4           0         0        0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we import household income from `hh` dataframe and merge it with `per` dataframe to get the household income information for each individual."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "per = pd.merge(per, hh[['hh_id', 'income', 'autos', 'transponder']], on = 'hh_id', how = 'inner')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, we create a couple of dummy variables with binary values to include them as explanatory variables in model estimation. We create `female` and `full-time` variable to observe the categorical effect of gender and full-time employment status on model outcome. We can also scale `income` varibale to ensure more reasonable variance in the estimation. For example, we can simply scale down the numbers by 100K. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "per['female'] = np.where((per.gender == 'f'), 1, 0)\n",
    "per['full_time'] = np.where((per.type == 'Full-time worker'), 1, 0)\n",
    "per['hh_income(100k)'] = per['income'] / 100000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 40683 entries, 0 to 40682\n",
      "Data columns (total 19 columns):\n",
      "hh_id               40683 non-null int64\n",
      "person_id           40683 non-null int64\n",
      "person_num          40683 non-null int64\n",
      "age                 40683 non-null int64\n",
      "gender              40683 non-null object\n",
      "type                40683 non-null object\n",
      "value_of_time       40683 non-null float64\n",
      "activity_pattern    40683 non-null object\n",
      "imf_choice          40683 non-null int64\n",
      "inmf_choice         40683 non-null int64\n",
      "fp_choice           40683 non-null int64\n",
      "reimb_pct           40683 non-null float64\n",
      "wrkr_type           40683 non-null int64\n",
      "income              40683 non-null int64\n",
      "autos               40683 non-null int64\n",
      "transponder         40683 non-null int64\n",
      "female              40683 non-null int64\n",
      "full_time           40683 non-null int64\n",
      "hh_income(100k)     40683 non-null float64\n",
      "dtypes: float64(3), int64(13), object(3)\n",
      "memory usage: 6.2+ MB\n"
     ]
    }
   ],
   "source": [
    "per.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At this point, we have the dataframe ready with all explanatory variables (`age`, `female`, `full-time` and `hh_income(100k)`) and the response variable (`value_of_time`). We check data types of all variables and presence of `NULL` values. If everything looks appropriate, then we go for creating a model object. <br>\n",
    "<br>\n",
    "We use `sm.OLS()` method for building a model object. Inside this method, we can add a constant to the explanatory variables in regression model using `sm.add_constant()` method. Then, we fit the model using `.fit()` method and store the estimation results in a variable. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jpn/anaconda/envs/tt/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "model = sm.OLS(per['value_of_time'], sm.add_constant(per[['age', 'female', 'full_time', 'hh_income(100k)']]))\n",
    "result = model.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can print the summary of model estimation using `.summary()` method, to review\n",
    "a number of statistical outputs from the model, including the model coefficients. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:          value_of_time   R-squared:                       0.036\n",
      "Model:                            OLS   Adj. R-squared:                  0.036\n",
      "Method:                 Least Squares   F-statistic:                     384.5\n",
      "Date:                Thu, 08 Aug 2019   Prob (F-statistic):               0.00\n",
      "Time:                        15:02:14   Log-Likelihood:            -1.4546e+05\n",
      "No. Observations:               40683   AIC:                         2.909e+05\n",
      "Df Residuals:                   40678   BIC:                         2.910e+05\n",
      "Df Model:                           4                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===================================================================================\n",
      "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------\n",
      "const               6.9651      0.116     60.046      0.000       6.738       7.192\n",
      "age                 0.0361      0.002     20.006      0.000       0.033       0.040\n",
      "female             -0.0345      0.087     -0.399      0.690      -0.204       0.135\n",
      "full_time           1.7770      0.089     19.855      0.000       1.602       1.952\n",
      "hh_income(100k)     0.9476      0.037     25.937      0.000       0.876       1.019\n",
      "==============================================================================\n",
      "Omnibus:                    17005.353   Durbin-Watson:                   0.353\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            77628.651\n",
      "Skew:                           2.042   Prob(JB):                         0.00\n",
      "Kurtosis:                       8.395   Cond. No.                         155.\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "print(result.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the model estimation summary, we see that full-time employment has a \n",
    "substantial positive effect on value of time. Increases in household income \n",
    "and age also contributes to the increase in value of time. The t-statistics\n",
    "for all these parameters are much larger than 1.96, indicating they are all \n",
    "almost certainly significant parameters in determining the person's value of\n",
    "time. However, the t-statistic for the gender of the person has a small \n",
    "t-statistics, with magnitude only about 0.4.  This suggests that gender is \n",
    "not a statistically significant factor in determining the value of time."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we estimate the same model, but adding the number of automobiles owned\n",
    "by the person's household as an additional explanatory factor, we can see that\n",
    "automobile ownership is also a relevant and statistically significant\n",
    "factor (with a t-statistic of 11.8)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:          value_of_time   R-squared:                       0.040\n",
      "Model:                            OLS   Adj. R-squared:                  0.040\n",
      "Method:                 Least Squares   F-statistic:                     336.2\n",
      "Date:                Thu, 08 Aug 2019   Prob (F-statistic):               0.00\n",
      "Time:                        15:02:14   Log-Likelihood:            -1.4539e+05\n",
      "No. Observations:               40683   AIC:                         2.908e+05\n",
      "Df Residuals:                   40677   BIC:                         2.909e+05\n",
      "Df Model:                           5                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===================================================================================\n",
      "                      coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-----------------------------------------------------------------------------------\n",
      "const               5.6471      0.161     35.013      0.000       5.331       5.963\n",
      "age                 0.0407      0.002     22.068      0.000       0.037       0.044\n",
      "female              0.0060      0.086      0.069      0.945      -0.163       0.175\n",
      "full_time           1.7309      0.089     19.354      0.000       1.556       1.906\n",
      "hh_income(100k)     0.8326      0.038     22.047      0.000       0.759       0.907\n",
      "autos               0.6224      0.053     11.740      0.000       0.518       0.726\n",
      "==============================================================================\n",
      "Omnibus:                    17013.391   Durbin-Watson:                   0.348\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            77754.288\n",
      "Skew:                           2.043   Prob(JB):                         0.00\n",
      "Kurtosis:                       8.401   Cond. No.                         203.\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "model = sm.OLS(\n",
    "    per['value_of_time'], \n",
    "    sm.add_constant(per[['age', 'female', 'full_time', 'hh_income(100k)', 'autos']])\n",
    ")\n",
    "result = model.fit()\n",
    "print(result.summary())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
