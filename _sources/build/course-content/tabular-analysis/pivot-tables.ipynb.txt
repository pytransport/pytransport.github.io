{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import transportation_tutorials as tt\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Crosstab and Pivot Tables\n",
    "\n",
    "If you are familiar with the \"pivot table\" functionality in \n",
    "spreadsheets, you'll find pretty much the same functionality\n",
    "in pandas using [pivot_table](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot_table.html#pandas.DataFrame.pivot_table).\n",
    "\n",
    "To demonstrate some features of pivot tables with pandas, we'll load\n",
    "and populate the households data from the Jupiter study area:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "hh = pd.read_csv(tt.data('SERPM8-BASE2015-HOUSEHOLDS'), index_col=0)\n",
    "hh.set_index('hh_id', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Count of persons per HH\n",
    "persons = pd.read_csv(tt.data('SERPM8-BASE2015-PERSONS'))\n",
    "hh = hh.merge(\n",
    "    persons.groupby('hh_id').size().rename('hhsize'), \n",
    "    left_on=['hh_id'], \n",
    "    right_index=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Count of trips per HH\n",
    "trips = pd.read_csv(tt.data('SERPM8-BASE2015-TRIPS'))\n",
    "hh = hh.merge(\n",
    "    trips.groupby(['hh_id']).size().rename('n_trips'), \n",
    "    left_on=['hh_id'], \n",
    "    right_index=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simple Pivot Tables\n",
    "\n",
    "To generate a pivot table, we will use the `pivot_table` method\n",
    "of the households DataFrame. This method takes three principal \n",
    "arguments: `index`, `columns`, and `values`.  The `index` and `columns`\n",
    "indicate the aggregation categories for the rows and columns\n",
    "of the resulting summary table, respectively.  The `values`\n",
    "indicate which column of values should be aggregated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>autos</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hhsize</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.825093</td>\n",
       "      <td>3.390000</td>\n",
       "      <td>3.142857</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.122137</td>\n",
       "      <td>6.108434</td>\n",
       "      <td>6.641809</td>\n",
       "      <td>6.690341</td>\n",
       "      <td>6.538462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.200000</td>\n",
       "      <td>8.551613</td>\n",
       "      <td>9.376471</td>\n",
       "      <td>9.581549</td>\n",
       "      <td>9.172043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10.750000</td>\n",
       "      <td>10.922330</td>\n",
       "      <td>11.739943</td>\n",
       "      <td>12.326733</td>\n",
       "      <td>11.936364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>13.230769</td>\n",
       "      <td>12.893617</td>\n",
       "      <td>13.583893</td>\n",
       "      <td>14.485714</td>\n",
       "      <td>13.821782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.500000</td>\n",
       "      <td>12.868421</td>\n",
       "      <td>15.778351</td>\n",
       "      <td>15.783784</td>\n",
       "      <td>17.593407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>20.500000</td>\n",
       "      <td>19.733333</td>\n",
       "      <td>18.725000</td>\n",
       "      <td>20.117647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>11.000000</td>\n",
       "      <td>13.600000</td>\n",
       "      <td>16.791667</td>\n",
       "      <td>16.428571</td>\n",
       "      <td>20.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22.631579</td>\n",
       "      <td>21.863636</td>\n",
       "      <td>19.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>18.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "autos           0          1          2          3          4\n",
       "hhsize                                                       \n",
       "1        3.000000   3.825093   3.390000   3.142857        NaN\n",
       "2        5.122137   6.108434   6.641809   6.690341   6.538462\n",
       "3        7.200000   8.551613   9.376471   9.581549   9.172043\n",
       "4       10.750000  10.922330  11.739943  12.326733  11.936364\n",
       "5       13.230769  12.893617  13.583893  14.485714  13.821782\n",
       "6        7.500000  12.868421  15.778351  15.783784  17.593407\n",
       "7             NaN  20.500000  19.733333  18.725000  20.117647\n",
       "8       11.000000  13.600000  16.791667  16.428571  20.200000\n",
       "9             NaN        NaN  22.631579  21.863636  19.687500\n",
       "10            NaN        NaN  18.000000  34.000000  18.000000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh.pivot_table(\n",
    "    index='hhsize',\n",
    "    columns='autos',\n",
    "    values='n_trips',\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you only want to evalate the pivot table on one dimension, you can omit\n",
    "either `index` or `columns`, which gives the results you might expect:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>autos</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>n_trips</th>\n",
       "      <td>4.600985</td>\n",
       "      <td>4.813088</td>\n",
       "      <td>8.114862</td>\n",
       "      <td>10.090541</td>\n",
       "      <td>13.364162</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "autos           0         1         2          3          4\n",
       "n_trips  4.600985  4.813088  8.114862  10.090541  13.364162"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh.pivot_table(\n",
    "    columns='autos',\n",
    "    values='n_trips',\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n_trips</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hhsize</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.770963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6.516076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9.286667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11.827869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>13.812303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>15.790909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>19.536585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>15.851852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>21.109589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>23.333333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          n_trips\n",
       "hhsize           \n",
       "1        3.770963\n",
       "2        6.516076\n",
       "3        9.286667\n",
       "4       11.827869\n",
       "5       13.812303\n",
       "6       15.790909\n",
       "7       19.536585\n",
       "8       15.851852\n",
       "9       21.109589\n",
       "10      23.333333"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh.pivot_table(\n",
    "    index='hhsize',\n",
    "    values='n_trips',\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Marginals\n",
    "\n",
    "The two outputs above are actually the marginals of the original pivot table.\n",
    "If you want to generate the entire pivot table and include the marginals on\n",
    "rows and columns, you can do that in one step with the `margins` argument:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>autos</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hhsize</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.825093</td>\n",
       "      <td>3.390000</td>\n",
       "      <td>3.142857</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.770963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.122137</td>\n",
       "      <td>6.108434</td>\n",
       "      <td>6.641809</td>\n",
       "      <td>6.690341</td>\n",
       "      <td>6.538462</td>\n",
       "      <td>6.516076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.200000</td>\n",
       "      <td>8.551613</td>\n",
       "      <td>9.376471</td>\n",
       "      <td>9.581549</td>\n",
       "      <td>9.172043</td>\n",
       "      <td>9.286667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10.750000</td>\n",
       "      <td>10.922330</td>\n",
       "      <td>11.739943</td>\n",
       "      <td>12.326733</td>\n",
       "      <td>11.936364</td>\n",
       "      <td>11.827869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>13.230769</td>\n",
       "      <td>12.893617</td>\n",
       "      <td>13.583893</td>\n",
       "      <td>14.485714</td>\n",
       "      <td>13.821782</td>\n",
       "      <td>13.812303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.500000</td>\n",
       "      <td>12.868421</td>\n",
       "      <td>15.778351</td>\n",
       "      <td>15.783784</td>\n",
       "      <td>17.593407</td>\n",
       "      <td>15.790909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>20.500000</td>\n",
       "      <td>19.733333</td>\n",
       "      <td>18.725000</td>\n",
       "      <td>20.117647</td>\n",
       "      <td>19.536585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>11.000000</td>\n",
       "      <td>13.600000</td>\n",
       "      <td>16.791667</td>\n",
       "      <td>16.428571</td>\n",
       "      <td>20.200000</td>\n",
       "      <td>15.851852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22.631579</td>\n",
       "      <td>21.863636</td>\n",
       "      <td>19.687500</td>\n",
       "      <td>21.109589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>23.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>4.600985</td>\n",
       "      <td>4.813088</td>\n",
       "      <td>8.114862</td>\n",
       "      <td>10.090541</td>\n",
       "      <td>13.364162</td>\n",
       "      <td>7.176941</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "autos           0          1          2          3          4        All\n",
       "hhsize                                                                  \n",
       "1        3.000000   3.825093   3.390000   3.142857        NaN   3.770963\n",
       "2        5.122137   6.108434   6.641809   6.690341   6.538462   6.516076\n",
       "3        7.200000   8.551613   9.376471   9.581549   9.172043   9.286667\n",
       "4       10.750000  10.922330  11.739943  12.326733  11.936364  11.827869\n",
       "5       13.230769  12.893617  13.583893  14.485714  13.821782  13.812303\n",
       "6        7.500000  12.868421  15.778351  15.783784  17.593407  15.790909\n",
       "7             NaN  20.500000  19.733333  18.725000  20.117647  19.536585\n",
       "8       11.000000  13.600000  16.791667  16.428571  20.200000  15.851852\n",
       "9             NaN        NaN  22.631579  21.863636  19.687500  21.109589\n",
       "10            NaN        NaN  18.000000  34.000000  18.000000  23.333333\n",
       "All      4.600985   4.813088   8.114862  10.090541  13.364162   7.176941"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh.pivot_table(\n",
    "    index='hhsize',\n",
    "    columns='autos',\n",
    "    values='n_trips',\n",
    "    margins=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Aggregation Functions\n",
    "\n",
    "By default, `pivot_table` computes the mean (average) for the `values` column\n",
    "aggregated within the categories that define each cell. However, alternate\n",
    "aggregation functions can be used, such as `'count'`, `'std'` (the standard\n",
    "deviation), or `'sem'` (the standard error of the mean). One or more functions\n",
    "can be specified using the `aggfunc` argument:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">mean</th>\n",
       "      <th colspan=\"5\" halign=\"left\">count</th>\n",
       "      <th colspan=\"5\" halign=\"left\">sem</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>autos</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hhsize</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.825093</td>\n",
       "      <td>3.390000</td>\n",
       "      <td>3.142857</td>\n",
       "      <td>NaN</td>\n",
       "      <td>215.0</td>\n",
       "      <td>4551.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.114196</td>\n",
       "      <td>0.029032</td>\n",
       "      <td>0.117081</td>\n",
       "      <td>0.704698</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.122137</td>\n",
       "      <td>6.108434</td>\n",
       "      <td>6.641809</td>\n",
       "      <td>6.690341</td>\n",
       "      <td>6.538462</td>\n",
       "      <td>131.0</td>\n",
       "      <td>1411.0</td>\n",
       "      <td>5042.0</td>\n",
       "      <td>704.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.206478</td>\n",
       "      <td>0.068357</td>\n",
       "      <td>0.039829</td>\n",
       "      <td>0.108316</td>\n",
       "      <td>0.362725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.200000</td>\n",
       "      <td>8.551613</td>\n",
       "      <td>9.376471</td>\n",
       "      <td>9.581549</td>\n",
       "      <td>9.172043</td>\n",
       "      <td>30.0</td>\n",
       "      <td>310.0</td>\n",
       "      <td>1360.0</td>\n",
       "      <td>607.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>0.523911</td>\n",
       "      <td>0.177461</td>\n",
       "      <td>0.084386</td>\n",
       "      <td>0.140620</td>\n",
       "      <td>0.375009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10.750000</td>\n",
       "      <td>10.922330</td>\n",
       "      <td>11.739943</td>\n",
       "      <td>12.326733</td>\n",
       "      <td>11.936364</td>\n",
       "      <td>8.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>696.0</td>\n",
       "      <td>303.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>2.024405</td>\n",
       "      <td>0.375504</td>\n",
       "      <td>0.134725</td>\n",
       "      <td>0.229000</td>\n",
       "      <td>0.396456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>13.230769</td>\n",
       "      <td>12.893617</td>\n",
       "      <td>13.583893</td>\n",
       "      <td>14.485714</td>\n",
       "      <td>13.821782</td>\n",
       "      <td>13.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>298.0</td>\n",
       "      <td>175.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>1.387461</td>\n",
       "      <td>0.545975</td>\n",
       "      <td>0.243191</td>\n",
       "      <td>0.327388</td>\n",
       "      <td>0.444192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7.500000</td>\n",
       "      <td>12.868421</td>\n",
       "      <td>15.778351</td>\n",
       "      <td>15.783784</td>\n",
       "      <td>17.593407</td>\n",
       "      <td>6.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>194.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>1.962142</td>\n",
       "      <td>0.801111</td>\n",
       "      <td>0.390703</td>\n",
       "      <td>0.544559</td>\n",
       "      <td>0.552932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>20.500000</td>\n",
       "      <td>19.733333</td>\n",
       "      <td>18.725000</td>\n",
       "      <td>20.117647</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.658312</td>\n",
       "      <td>0.819214</td>\n",
       "      <td>0.807011</td>\n",
       "      <td>0.840979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>11.000000</td>\n",
       "      <td>13.600000</td>\n",
       "      <td>16.791667</td>\n",
       "      <td>16.428571</td>\n",
       "      <td>20.200000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.605551</td>\n",
       "      <td>1.463199</td>\n",
       "      <td>1.367293</td>\n",
       "      <td>1.836886</td>\n",
       "      <td>2.457641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22.631579</td>\n",
       "      <td>21.863636</td>\n",
       "      <td>19.687500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.035088</td>\n",
       "      <td>1.211945</td>\n",
       "      <td>0.988276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             mean                                              count          \\\n",
       "autos           0          1          2          3          4      0       1   \n",
       "hhsize                                                                         \n",
       "1        3.000000   3.825093   3.390000   3.142857        NaN  215.0  4551.0   \n",
       "2        5.122137   6.108434   6.641809   6.690341   6.538462  131.0  1411.0   \n",
       "3        7.200000   8.551613   9.376471   9.581549   9.172043   30.0   310.0   \n",
       "4       10.750000  10.922330  11.739943  12.326733  11.936364    8.0   103.0   \n",
       "5       13.230769  12.893617  13.583893  14.485714  13.821782   13.0    47.0   \n",
       "6        7.500000  12.868421  15.778351  15.783784  17.593407    6.0    38.0   \n",
       "7             NaN  20.500000  19.733333  18.725000  20.117647    NaN     4.0   \n",
       "8       11.000000  13.600000  16.791667  16.428571  20.200000    3.0    15.0   \n",
       "9             NaN        NaN  22.631579  21.863636  19.687500    NaN     NaN   \n",
       "10            NaN        NaN  18.000000  34.000000  18.000000    NaN     NaN   \n",
       "\n",
       "                                   sem                                          \n",
       "autos        2      3      4         0         1         2         3         4  \n",
       "hhsize                                                                          \n",
       "1        200.0    7.0    NaN  0.114196  0.029032  0.117081  0.704698       NaN  \n",
       "2       5042.0  704.0   52.0  0.206478  0.068357  0.039829  0.108316  0.362725  \n",
       "3       1360.0  607.0   93.0  0.523911  0.177461  0.084386  0.140620  0.375009  \n",
       "4        696.0  303.0  110.0  2.024405  0.375504  0.134725  0.229000  0.396456  \n",
       "5        298.0  175.0  101.0  1.387461  0.545975  0.243191  0.327388  0.444192  \n",
       "6        194.0  111.0   91.0  1.962142  0.801111  0.390703  0.544559  0.552932  \n",
       "7         45.0   40.0   34.0       NaN  1.658312  0.819214  0.807011  0.840979  \n",
       "8         24.0    7.0    5.0  3.605551  1.463199  1.367293  1.836886  2.457641  \n",
       "9         19.0   22.0   32.0       NaN       NaN  1.035088  1.211945  0.988276  \n",
       "10         1.0    1.0    1.0       NaN       NaN       NaN       NaN       NaN  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh.pivot_table(\n",
    "    index='hhsize',\n",
    "    columns='autos',\n",
    "    values='n_trips',\n",
    "    aggfunc=['mean', 'count', 'sem'],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If all you want is to simply count the number of rows in each category,\n",
    "you can use `aggfunc='size'`, which will do so without requiring a `values`\n",
    "argument.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>autos</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hhsize</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>215.0</td>\n",
       "      <td>4551.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>131.0</td>\n",
       "      <td>1411.0</td>\n",
       "      <td>5042.0</td>\n",
       "      <td>704.0</td>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30.0</td>\n",
       "      <td>310.0</td>\n",
       "      <td>1360.0</td>\n",
       "      <td>607.0</td>\n",
       "      <td>93.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.0</td>\n",
       "      <td>103.0</td>\n",
       "      <td>696.0</td>\n",
       "      <td>303.0</td>\n",
       "      <td>110.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>13.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>298.0</td>\n",
       "      <td>175.0</td>\n",
       "      <td>101.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>194.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>91.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "autos       0       1       2      3      4\n",
       "hhsize                                     \n",
       "1       215.0  4551.0   200.0    7.0    NaN\n",
       "2       131.0  1411.0  5042.0  704.0   52.0\n",
       "3        30.0   310.0  1360.0  607.0   93.0\n",
       "4         8.0   103.0   696.0  303.0  110.0\n",
       "5        13.0    47.0   298.0  175.0  101.0\n",
       "6         6.0    38.0   194.0  111.0   91.0\n",
       "7         NaN     4.0    45.0   40.0   34.0\n",
       "8         3.0    15.0    24.0    7.0    5.0\n",
       "9         NaN     NaN    19.0   22.0   32.0\n",
       "10        NaN     NaN     1.0    1.0    1.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh.pivot_table(\n",
    "    index='hhsize', \n",
    "    columns='autos',\n",
    "    aggfunc='size',\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can observe that the empty cells in the result above do not\n",
    "show zero, but rather `NaN` -- and this results in the data type \n",
    "for the content being `float` instead of `int`, as there is no `NaN`\n",
    "representation in integers.  To correct this, set the `fill_value`\n",
    "to zero as well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>autos</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hhsize</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>215</td>\n",
       "      <td>4551</td>\n",
       "      <td>200</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>131</td>\n",
       "      <td>1411</td>\n",
       "      <td>5042</td>\n",
       "      <td>704</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30</td>\n",
       "      <td>310</td>\n",
       "      <td>1360</td>\n",
       "      <td>607</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>103</td>\n",
       "      <td>696</td>\n",
       "      <td>303</td>\n",
       "      <td>110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>13</td>\n",
       "      <td>47</td>\n",
       "      <td>298</td>\n",
       "      <td>175</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>38</td>\n",
       "      <td>194</td>\n",
       "      <td>111</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "      <td>40</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3</td>\n",
       "      <td>15</td>\n",
       "      <td>24</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>22</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "autos     0     1     2    3    4\n",
       "hhsize                           \n",
       "1       215  4551   200    7    0\n",
       "2       131  1411  5042  704   52\n",
       "3        30   310  1360  607   93\n",
       "4         8   103   696  303  110\n",
       "5        13    47   298  175  101\n",
       "6         6    38   194  111   91\n",
       "7         0     4    45   40   34\n",
       "8         3    15    24    7    5\n",
       "9         0     0    19   22   32\n",
       "10        0     0     1    1    1"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh.pivot_table(\n",
    "    index='hhsize', \n",
    "    columns='autos',\n",
    "    aggfunc='size',\n",
    "    fill_value=0,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using Binning of Continuous Variables\n",
    "\n",
    "As with the `groupby` function, using a non-categorical column for aggregation\n",
    "can be problematic, or may result in a pivot table larger than desired. For example,\n",
    "if we switch 'hhsize' for 'income' on this dataset, the pivot table will have over\n",
    "2,000 rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>autos</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>income</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>-9499</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.333333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-2400</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>-2000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.641026</td>\n",
       "      <td>4.524064</td>\n",
       "      <td>4.956522</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200</th>\n",
       "      <td>NaN</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>NaN</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>500</th>\n",
       "      <td>NaN</td>\n",
       "      <td>5.250000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>600</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>650</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>690</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>800</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>900</th>\n",
       "      <td>NaN</td>\n",
       "      <td>8.500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>950</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1100</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1300</th>\n",
       "      <td>4.666667</td>\n",
       "      <td>3.812500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1400</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.333333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1500</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1600</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1700</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1800</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2100</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2200</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2400</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>646300</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>646700</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.666667</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>647000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>664000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>667000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.333333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>668000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.750000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>671260</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>680000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>697000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>14.250000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>701100</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>8.500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>704000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>707000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>720600</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>729000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>746000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>755000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.666667</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>782000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>793000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>798000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4.800000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>805000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>807600</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>812000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.600000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>846000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>857000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>907000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>9.666667</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>916000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.500000</td>\n",
       "      <td>19.800000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>922500</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>7.500000</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>12.500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.333333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1040000</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2048 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "autos            0          1          2          3     4\n",
       "income                                                   \n",
       "-9499          NaN        NaN   8.333333        NaN   NaN\n",
       "-2400     2.000000        NaN        NaN        NaN   NaN\n",
       "-2000          NaN        NaN  12.000000        NaN   NaN\n",
       " 0        3.641026   4.524064   4.956522   2.000000   NaN\n",
       " 1             NaN   4.000000        NaN        NaN   NaN\n",
       " 100           NaN   3.500000        NaN        NaN   NaN\n",
       " 200           NaN   5.000000        NaN        NaN   NaN\n",
       " 220           NaN   7.000000        NaN        NaN   NaN\n",
       " 230           NaN   4.500000        NaN        NaN   NaN\n",
       " 400           NaN        NaN  10.000000        NaN   NaN\n",
       " 480      3.000000   2.000000        NaN        NaN   NaN\n",
       " 500           NaN   5.250000        NaN        NaN   NaN\n",
       " 600           NaN        NaN   6.000000        NaN   NaN\n",
       " 650           NaN   2.000000        NaN        NaN   NaN\n",
       " 690           NaN        NaN  12.000000        NaN   NaN\n",
       " 800           NaN        NaN   2.000000        NaN   NaN\n",
       " 900           NaN   8.500000        NaN        NaN   NaN\n",
       " 950           NaN   4.000000        NaN        NaN   NaN\n",
       " 1000          NaN   3.500000   8.000000        NaN   NaN\n",
       " 1100     4.000000   3.000000        NaN        NaN   NaN\n",
       " 1300     4.666667   3.812500        NaN        NaN   NaN\n",
       " 1400     3.000000   5.333333        NaN        NaN   NaN\n",
       " 1500          NaN   3.000000        NaN        NaN   NaN\n",
       " 1600          NaN   3.000000   9.000000        NaN   NaN\n",
       " 1700          NaN   3.000000        NaN        NaN   NaN\n",
       " 1800     2.000000   5.000000        NaN        NaN   NaN\n",
       " 2000          NaN   3.000000   2.000000        NaN   NaN\n",
       " 2100          NaN   4.000000        NaN        NaN   NaN\n",
       " 2200          NaN   2.500000   2.000000        NaN   NaN\n",
       " 2400          NaN   2.500000        NaN        NaN   NaN\n",
       "...            ...        ...        ...        ...   ...\n",
       " 646300        NaN        NaN  10.000000  14.000000   NaN\n",
       " 646700        NaN        NaN   6.666667        NaN   NaN\n",
       " 647000        NaN        NaN   6.500000        NaN   NaN\n",
       " 664000        NaN        NaN   6.000000        NaN   2.0\n",
       " 667000        NaN        NaN  13.333333        NaN   NaN\n",
       " 668000        NaN        NaN   7.750000   6.000000   NaN\n",
       " 671260        NaN        NaN   9.000000        NaN  12.0\n",
       " 680000        NaN        NaN   7.000000        NaN   NaN\n",
       " 697000        NaN  12.000000   9.000000  14.250000   NaN\n",
       " 701100        NaN   4.000000   8.500000        NaN   NaN\n",
       " 704000        NaN        NaN   9.500000        NaN   NaN\n",
       " 707000        NaN        NaN  12.000000        NaN   NaN\n",
       " 720600        NaN        NaN  10.000000  10.000000   NaN\n",
       " 729000        NaN        NaN   8.000000        NaN   NaN\n",
       " 746000        NaN        NaN  12.500000        NaN   NaN\n",
       " 755000        NaN        NaN  20.666667  25.000000   NaN\n",
       " 782000        NaN        NaN  17.000000        NaN   NaN\n",
       " 793000        NaN        NaN   9.500000   8.000000   NaN\n",
       " 798000        NaN   4.800000        NaN        NaN   NaN\n",
       " 805000        NaN        NaN   6.000000        NaN   NaN\n",
       " 807600        NaN        NaN   6.500000        NaN   NaN\n",
       " 812000        NaN        NaN   6.600000   9.000000   NaN\n",
       " 846000        NaN        NaN   8.000000        NaN   NaN\n",
       " 857000        NaN        NaN        NaN   7.000000   NaN\n",
       " 907000        NaN        NaN  11.000000   9.666667   NaN\n",
       " 916000        NaN        NaN  13.500000  19.800000   NaN\n",
       " 922500        NaN        NaN  14.000000   7.500000   7.0\n",
       " 975000        NaN  12.500000        NaN  14.000000   NaN\n",
       " 985000        NaN        NaN  10.333333        NaN   NaN\n",
       " 1040000       NaN        NaN   4.000000        NaN   NaN\n",
       "\n",
       "[2048 rows x 5 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh.pivot_table(\n",
    "    index='income',\n",
    "    columns='autos',\n",
    "    values='n_trips',\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This problem can be addressed by reformatting the relevant variable\n",
    "into a categorical form, using a binning function. For pivot tables,\n",
    "the `pandas.qcut` function is often a good choice for this, as it \n",
    "will bin the variable so that each bin has a similar total number of\n",
    "observations from the source table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>autos</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>income</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>(-9499.001, 31600.0]</th>\n",
       "      <td>4.325806</td>\n",
       "      <td>4.516639</td>\n",
       "      <td>7.717423</td>\n",
       "      <td>9.283019</td>\n",
       "      <td>13.230769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(31600.0, 57000.0]</th>\n",
       "      <td>4.807018</td>\n",
       "      <td>4.940185</td>\n",
       "      <td>7.586078</td>\n",
       "      <td>9.391061</td>\n",
       "      <td>12.796296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(57000.0, 91000.0]</th>\n",
       "      <td>7.416667</td>\n",
       "      <td>4.740959</td>\n",
       "      <td>7.990544</td>\n",
       "      <td>9.912644</td>\n",
       "      <td>14.240741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(91000.0, 145800.0]</th>\n",
       "      <td>4.444444</td>\n",
       "      <td>5.722326</td>\n",
       "      <td>8.471237</td>\n",
       "      <td>9.681750</td>\n",
       "      <td>12.485915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(145800.0, 1040000.0]</th>\n",
       "      <td>5.833333</td>\n",
       "      <td>4.968872</td>\n",
       "      <td>8.328530</td>\n",
       "      <td>10.888717</td>\n",
       "      <td>13.673267</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "autos                         0         1         2          3          4\n",
       "income                                                                   \n",
       "(-9499.001, 31600.0]   4.325806  4.516639  7.717423   9.283019  13.230769\n",
       "(31600.0, 57000.0]     4.807018  4.940185  7.586078   9.391061  12.796296\n",
       "(57000.0, 91000.0]     7.416667  4.740959  7.990544   9.912644  14.240741\n",
       "(91000.0, 145800.0]    4.444444  5.722326  8.471237   9.681750  12.485915\n",
       "(145800.0, 1040000.0]  5.833333  4.968872  8.328530  10.888717  13.673267"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh.pivot_table(\n",
    "    index=pd.qcut(hh.income, 5),\n",
    "    columns='autos',\n",
    "    values='n_trips',\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you might notice above, the `index` argument (and also the `columns`)\n",
    "does not need to be the name of a column in the original DataFrame, \n",
    "but instead can be an indexed-alike Series or similar object than\n",
    "can be used to define the group-by categories for that axis of the \n",
    "resulting pivot."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
