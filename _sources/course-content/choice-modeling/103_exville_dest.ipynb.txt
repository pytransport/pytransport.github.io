{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exampville Destination Choice\n",
    "\n",
    "In this notebook, we will walk through the estimation of a tour \n",
    "destination choice model for \n",
    "Exampville, an entirely fictional town built for the express purpose of \n",
    "demostrating the use of discrete choice modeling tools for transportation \n",
    "planning.\n",
    "\n",
    "This example will assume the reader is familiar with the \n",
    "mathematical basics of destination choice\n",
    "modeling generally, and will focus on the technical \n",
    "aspects of estimating the parameters\n",
    "of a destination choice model in Python using Larch."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you have not yet estimated parameters of a mode choice model\n",
    "or generated logsums from that model, you should go back and\n",
    "review those sections before you begin this one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import larch, numpy, pandas, os\n",
    "from larch import P, X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preparation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To begin, we will re-load the data files from our tour mode choice example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import larch.exampville\n",
    "\n",
    "hh = pandas.read_csv( larch.exampville.files.hh )\n",
    "pp = pandas.read_csv( larch.exampville.files.person )\n",
    "tour = pandas.read_csv( larch.exampville.files.tour )\n",
    "skims = larch.OMX( larch.exampville.files.skims, mode='r' )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll also load an employment file. This file contains employment\n",
    "data by TAZ.  The TAZ's will be the choices in the destination \n",
    "choice model, and the employment data will allow us to characterize\n",
    "the number of opportunities in each TAZ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 40 entries, 1 to 40\n",
      "Data columns (total 3 columns):\n",
      " #   Column         Non-Null Count  Dtype\n",
      "---  ------         --------------  -----\n",
      " 0   NONRETAIL_EMP  40 non-null     int64\n",
      " 1   RETAIL_EMP     40 non-null     int64\n",
      " 2   TOTAL_EMP      40 non-null     int64\n",
      "dtypes: int64(3)\n",
      "memory usage: 1.2 KB\n"
     ]
    }
   ],
   "source": [
    "emp = pandas.read_csv(larch.exampville.files.employment, index_col='TAZ')\n",
    "emp.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll also load the saved logsums from the mode choice estimation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "logsums = pandas.read_pickle('/tmp/logsums.pkl.gz')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll replicate the pre-processing used in the mode choice estimation,\n",
    "to merge the household and person characteristics into the tours data,\n",
    "add the index values for the home TAZ's, filter to include only \n",
    "work tours, and merge with the level of service skims. (If this \n",
    "pre-processing was computationally expensive, it would probably have\n",
    "been better to save the results to disk and reload them as needed,\n",
    "but for this model these commands will run almost instantaneously.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "co = tour.merge(hh, on='HHID').merge(pp, on=('HHID', 'PERSONID'))\n",
    "co[\"HOMETAZi\"] = co[\"HOMETAZ\"] - 1\n",
    "co[\"DTAZi\"] = co[\"DTAZ\"] - 1\n",
    "co = co[co.TOURPURP == 1]\n",
    "co.index.name = 'CASE_ID'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this destination choice model, we'll want to use the mode choice\n",
    "logsums we calculated previously, and we'll use these values as data.  The alternatives in\n",
    "the destinations model are much more regular than in the mode choice \n",
    "model -- the utility function for each destination will have a common\n",
    "form -- we'll use `idca` format to make data management simpler.  This\n",
    "format maintains a data array in three dimensions instead of two: cases,\n",
    "alternatives, and variables.  We can still use a pandas.DataFrame to\n",
    "hold this data, but we'll use a `MultiIndex` for one of the typical \n",
    "dimensions.\n",
    "\n",
    "We already have one `idca` format variable: the logsums we loaded above.\n",
    "For a destination choice model, we'll often also want to use distance\n",
    "--specifically, the distance from the known origin zone to each possible\n",
    "destination zones.  We can create a distance variable as an array,\n",
    "selecting for each case in the `co` data a row from the 'AUTO_DIST'\n",
    "array that matches the correct origin zone (by index number).\n",
    "Note that we first load the skim array into memory using `[:]` and then\n",
    "select the rows, to overcome a technical limitation of the PyTables\n",
    "library (which underpins the open matrix format) that prevents us \n",
    "from reading the final array directly from the file on disk."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "distance = pandas.DataFrame(\n",
    "    skims.AUTO_DIST[:][co[\"HOMETAZi\"], :],\n",
    "    index=co.index,\n",
    "    columns=skims.TAZ_ID,\n",
    ") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CASE_ID  TAZ_ID\n",
       "0        1         8.286090\n",
       "         2         8.256698\n",
       "         3         2.928829\n",
       "         4         5.502758\n",
       "         5         5.882862\n",
       "                     ...   \n",
       "20736    36        5.217099\n",
       "         37        1.832760\n",
       "         38        2.816438\n",
       "         39        4.940639\n",
       "         40        3.047736\n",
       "Length: 302560, dtype: float64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distance.stack()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The distance and logsum arrays are both currently formatted as \n",
    "single variables stored in two-dimensional format (cases by\n",
    "alternatives) but to concatenate them together, we can use the \n",
    "`unstack` command to convert each into a one-dimensional array.\n",
    "We'll also use the `rename` command to ensure that each \n",
    "one-dimensional array is named appropriately, so that when they\n",
    "are concatenate the result will include the names of the \n",
    "variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "ca = pandas.concat([\n",
    "    distance.stack().rename(\"distance\"),\n",
    "    logsums.stack().rename(\"logsum\"), \n",
    "], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have our two variables in the correct format:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>distance</th>\n",
       "      <th>logsum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>TAZ_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">0</th>\n",
       "      <th>1</th>\n",
       "      <td>8.286090</td>\n",
       "      <td>-2.935611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.256698</td>\n",
       "      <td>-2.660436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.928829</td>\n",
       "      <td>-1.745654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.502758</td>\n",
       "      <td>-2.229281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.882862</td>\n",
       "      <td>-2.403117</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          distance    logsum\n",
       "  TAZ_ID                    \n",
       "0 1       8.286090 -2.935611\n",
       "  2       8.256698 -2.660436\n",
       "  3       2.928829 -1.745654\n",
       "  4       5.502758 -2.229281\n",
       "  5       5.882862 -2.403117"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ca.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll also need to join employment data to the `ca` DataFrame.  This data has unique \n",
    "values only by alternative and not by caseid, so there are only\n",
    "40 unique rows.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 40 entries, 1 to 40\n",
      "Data columns (total 3 columns):\n",
      " #   Column         Non-Null Count  Dtype\n",
      "---  ------         --------------  -----\n",
      " 0   NONRETAIL_EMP  40 non-null     int64\n",
      " 1   RETAIL_EMP     40 non-null     int64\n",
      " 2   TOTAL_EMP      40 non-null     int64\n",
      "dtypes: int64(3)\n",
      "memory usage: 1.2 KB\n"
     ]
    }
   ],
   "source": [
    "emp.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But to make this work with the computational \n",
    "arrays required for Larch, we'll need to join this to the other \n",
    "idca data, like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "ca = ca.join(emp, on='TAZ_ID')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([b'SUB', b'SUB', b'URB', b'URB', b'SUB', b'URB', b'SUB', b'SUB',\n",
       "       b'SUB', b'SUB', b'SUB', b'SUB', b'SUB', b'SUB', b'SUB', b'SUB',\n",
       "       b'SUB', b'SUB', b'SUB', b'SUB', b'SUB', b'SUB', b'SUB', b'SUB',\n",
       "       b'URB', b'SUB', b'SUB', b'URB', b'SUB', b'SUB', b'SUB', b'SUB',\n",
       "       b'SUB', b'SUB', b'URB', b'CBD', b'SUB', b'SUB', b'SUB', b'SUB'],\n",
       "      dtype='|S3')"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "skims.TAZ_AREA_TYPE[:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also extract an 'Area Type' variable \n",
    "from the skims, and attach that as well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     b'SUB'\n",
       "2     b'SUB'\n",
       "3     b'URB'\n",
       "4     b'URB'\n",
       "5     b'SUB'\n",
       "6     b'URB'\n",
       "7     b'SUB'\n",
       "8     b'SUB'\n",
       "9     b'SUB'\n",
       "10    b'SUB'\n",
       "11    b'SUB'\n",
       "12    b'SUB'\n",
       "13    b'SUB'\n",
       "14    b'SUB'\n",
       "15    b'SUB'\n",
       "16    b'SUB'\n",
       "17    b'SUB'\n",
       "18    b'SUB'\n",
       "19    b'SUB'\n",
       "20    b'SUB'\n",
       "21    b'SUB'\n",
       "22    b'SUB'\n",
       "23    b'SUB'\n",
       "24    b'SUB'\n",
       "25    b'URB'\n",
       "26    b'SUB'\n",
       "27    b'SUB'\n",
       "28    b'URB'\n",
       "29    b'SUB'\n",
       "30    b'SUB'\n",
       "31    b'SUB'\n",
       "32    b'SUB'\n",
       "33    b'SUB'\n",
       "34    b'SUB'\n",
       "35    b'URB'\n",
       "36    b'CBD'\n",
       "37    b'SUB'\n",
       "38    b'SUB'\n",
       "39    b'SUB'\n",
       "40    b'SUB'\n",
       "Name: TAZ_AREA_TYPE, dtype: category\n",
       "Categories (3, object): [b'CBD', b'SUB', b'URB']"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "area_type = pandas.Series(\n",
    "    skims.TAZ_AREA_TYPE[:],\n",
    "    index=skims.TAZ_ID[:],\n",
    "    name ='TAZ_AREA_TYPE',\n",
    ").astype('category')\n",
    "area_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "ca = ca.join(area_type, on='TAZ_ID')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>distance</th>\n",
       "      <th>logsum</th>\n",
       "      <th>NONRETAIL_EMP</th>\n",
       "      <th>RETAIL_EMP</th>\n",
       "      <th>TOTAL_EMP</th>\n",
       "      <th>TAZ_AREA_TYPE</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>TAZ_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">0</th>\n",
       "      <th>1</th>\n",
       "      <td>8.286090</td>\n",
       "      <td>-2.935611</td>\n",
       "      <td>118</td>\n",
       "      <td>340</td>\n",
       "      <td>458</td>\n",
       "      <td>b'SUB'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.256698</td>\n",
       "      <td>-2.660436</td>\n",
       "      <td>91</td>\n",
       "      <td>0</td>\n",
       "      <td>91</td>\n",
       "      <td>b'SUB'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.928829</td>\n",
       "      <td>-1.745654</td>\n",
       "      <td>197</td>\n",
       "      <td>2</td>\n",
       "      <td>199</td>\n",
       "      <td>b'URB'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.502758</td>\n",
       "      <td>-2.229281</td>\n",
       "      <td>277</td>\n",
       "      <td>8</td>\n",
       "      <td>285</td>\n",
       "      <td>b'URB'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.882862</td>\n",
       "      <td>-2.403117</td>\n",
       "      <td>44</td>\n",
       "      <td>13</td>\n",
       "      <td>57</td>\n",
       "      <td>b'SUB'</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          distance    logsum  NONRETAIL_EMP  RETAIL_EMP  TOTAL_EMP  \\\n",
       "  TAZ_ID                                                             \n",
       "0 1       8.286090 -2.935611            118         340        458   \n",
       "  2       8.256698 -2.660436             91           0         91   \n",
       "  3       2.928829 -1.745654            197           2        199   \n",
       "  4       5.502758 -2.229281            277           8        285   \n",
       "  5       5.882862 -2.403117             44          13         57   \n",
       "\n",
       "         TAZ_AREA_TYPE  \n",
       "  TAZ_ID                \n",
       "0 1             b'SUB'  \n",
       "  2             b'SUB'  \n",
       "  3             b'URB'  \n",
       "  4             b'URB'  \n",
       "  5             b'SUB'  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ca.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we bundle the raw data into the `larch.DataFrames` structure,\n",
    "as we did for estimation, and attach this structure to the model\n",
    "as its `dataservice`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs = larch.DataFrames(\n",
    "    co=co,\n",
    "    ca=ca,\n",
    "    alt_codes=skims.TAZ_ID, \n",
    "    alt_names=[f'TAZ{i}' for i in skims.TAZ_ID],\n",
    "    ch_name='DTAZ',\n",
    "    av=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "larch.DataFrames:  (not computation-ready)\n",
      "  n_cases: 7564\n",
      "  n_alts: 40\n",
      "  data_ca:\n",
      "    - distance      (302560 non-null float64)\n",
      "    - logsum        (302560 non-null float64)\n",
      "    - NONRETAIL_EMP (302560 non-null int64)\n",
      "    - RETAIL_EMP    (302560 non-null int64)\n",
      "    - TOTAL_EMP     (302560 non-null int64)\n",
      "    - TAZ_AREA_TYPE (302560 non-null category)\n",
      "  data_co:\n",
      "    - TOURID        (7564 non-null int64)\n",
      "    - HHID          (7564 non-null int64)\n",
      "    - PERSONID      (7564 non-null int64)\n",
      "    - DTAZ          (7564 non-null int64)\n",
      "    - TOURMODE      (7564 non-null int64)\n",
      "    - TOURPURP      (7564 non-null int64)\n",
      "    - N_STOPS       (7564 non-null int64)\n",
      "    - N_TRIPS_x     (7564 non-null int64)\n",
      "    - N_TRIPS_HBW_x (7564 non-null int64)\n",
      "    - N_TRIPS_HBO_x (7564 non-null int64)\n",
      "    - N_TRIPS_NHB_x (7564 non-null int64)\n",
      "    - X             (7564 non-null float64)\n",
      "    - Y             (7564 non-null float64)\n",
      "    - INCOME        (7564 non-null float64)\n",
      "    - N_VEHICLES    (7564 non-null int64)\n",
      "    - HHSIZE        (7564 non-null int64)\n",
      "    - geometry      (7564 non-null object)\n",
      "    - HOMETAZ       (7564 non-null int64)\n",
      "    - N_TRIPS_y     (7564 non-null int64)\n",
      "    - N_TRIPS_HBW_y (7564 non-null int64)\n",
      "    - N_TRIPS_HBO_y (7564 non-null int64)\n",
      "    - N_TRIPS_NHB_y (7564 non-null int64)\n",
      "    - N_WORKERS     (7564 non-null int64)\n",
      "    - HHIDX         (7564 non-null int64)\n",
      "    - AGE           (7564 non-null int64)\n",
      "    - WORKS         (7564 non-null int64)\n",
      "    - N_WORK_TOURS  (7564 non-null int64)\n",
      "    - N_OTHER_TOURS (7564 non-null int64)\n",
      "    - N_TOURS       (7564 non-null int64)\n",
      "    - N_TRIPS       (7564 non-null int64)\n",
      "    - N_TRIPS_HBW   (7564 non-null int64)\n",
      "    - N_TRIPS_HBO   (7564 non-null int64)\n",
      "    - N_TRIPS_NHB   (7564 non-null int64)\n",
      "    - HOMETAZi      (7564 non-null int64)\n",
      "    - DTAZi         (7564 non-null int64)\n",
      "  data_av: <populated>\n",
      "  data_ch: DTAZ\n"
     ]
    }
   ],
   "source": [
    "dfs.info(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Definition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "m = larch.Model(dataservice=dfs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Destination choice models are premised on the theory that each\n",
    "trip or tour has a particular destination to which it is attracted,\n",
    "and each travel zone represents not one individual alternative, \n",
    "but rather a number of similar alternatives grouped together.\n",
    "Thus the utility function in a destination choice model typically is \n",
    "comprised of two components: a qualitative component (i.e., how\n",
    "good are the alternatives in a zone) and a quantitative component\n",
    "(i.e., how many discrete alternatives are in a zone).  The mathematical\n",
    "form of the utility function for the zone is\n",
    "\n",
    "$$\\sum_i{\\beta_i}X_i + \\theta\\log\\left(\\sum_j{\\exp(\\gamma_j)}Z_j\\right)$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "raw_mimetype": "text/latex"
   },
   "source": [
    "The quantitative component of this utility function is\n",
    "written for Larch in a linear-in-parameters format similarly to\n",
    "that for the typical utility function, but \n",
    "assigned to the `quantity_ca` attribute instead of `utility_ca`.\n",
    "Also, the exponentiation of the $\\gamma$ parameters is implied\n",
    "by using `quantity_ca`.  Note that the quantitative term is in \n",
    "theory always applied only to the alternatives themselves and \n",
    "not alone to attributes of the decision maker, so the `quantity_co`\n",
    "attribute is not implemented and cannot be used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "m.quantity_ca = (\n",
    "        + P.EmpRetail_HighInc * X('RETAIL_EMP * (INCOME>50000)')\n",
    "        + P.EmpNonRetail_HighInc * X('NONRETAIL_EMP') * X(\"INCOME>50000\")\n",
    "        + P.EmpRetail_LowInc * X('RETAIL_EMP') * X(\"INCOME<=50000\")\n",
    "        + P.EmpNonRetail_LowInc * X('NONRETAIL_EMP') * X(\"INCOME<=50000\")\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The parameter $\\theta$ is a coefficient on the entire log-of-quantity\n",
    "term, and can be defined by assigning a parameter name to the \n",
    "`quantity_scale` attribute.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#m.quantity_scale = P.Theta"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The qualitative component of utility can be \n",
    "given in the same manner as any other discrete choice model\n",
    "in Larch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "m.utility_ca = (\n",
    "    + P.logsum * X.logsum\n",
    "    + P.distance * X.distance\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this structure, we know the model will be overspecified\n",
    "if the parameter in the quantitative portion of utility are\n",
    "all estimated, in a manner similar to the overspecification\n",
    "if alternative specific constants are all estimated. To \n",
    "prevent this problem, we can lock parameters to particular\n",
    "values as needed using the `lock_values` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "m.lock_values(\n",
    "    EmpRetail_HighInc=0,\n",
    "    EmpRetail_LowInc=0,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then let's prepare this data for estimation.  Even though the\n",
    "data is already in memory, the `load_data` method is used to \n",
    "pre-process the data, extracting the required values, pre-computing \n",
    "the values of fixed expressions, and assembling the results into\n",
    "contiguous arrays suitable for computing the log likelihood values\n",
    "efficiently."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "req_data does not request {choice_ca,choice_co,choice_co_code} but choice is set and being provided\n",
      "req_data does not request avail_ca or avail_co but it is set and being provided\n"
     ]
    }
   ],
   "source": [
    "m.load_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Estimation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h3>Iteration 013 [Optimization terminated successfully] </h3>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<p>Best LL = -25157.726761576076</p>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>initvalue</th>\n",
       "      <th>nullvalue</th>\n",
       "      <th>minimum</th>\n",
       "      <th>maximum</th>\n",
       "      <th>holdfast</th>\n",
       "      <th>note</th>\n",
       "      <th>best</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>EmpNonRetail_HighInc</th>\n",
       "      <td>1.363793</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-inf</td>\n",
       "      <td>inf</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td>1.363793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpNonRetail_LowInc</th>\n",
       "      <td>-0.881379</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-inf</td>\n",
       "      <td>inf</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td>-0.881379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpRetail_HighInc</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpRetail_LowInc</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Theta</th>\n",
       "      <td>0.749374</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.001</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td>0.749374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>distance</th>\n",
       "      <td>-0.041820</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-inf</td>\n",
       "      <td>inf</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td>-0.041820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>logsum</th>\n",
       "      <td>1.020821</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-inf</td>\n",
       "      <td>inf</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td>1.020821</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         value  initvalue  nullvalue  minimum  maximum  \\\n",
       "EmpNonRetail_HighInc  1.363793        0.0        0.0     -inf      inf   \n",
       "EmpNonRetail_LowInc  -0.881379        0.0        0.0     -inf      inf   \n",
       "EmpRetail_HighInc     0.000000        0.0        0.0    0.000      0.0   \n",
       "EmpRetail_LowInc      0.000000        0.0        0.0    0.000      0.0   \n",
       "Theta                 0.749374        1.0        1.0    0.001      1.0   \n",
       "distance             -0.041820        0.0        0.0     -inf      inf   \n",
       "logsum                1.020821        0.0        0.0     -inf      inf   \n",
       "\n",
       "                      holdfast note      best  \n",
       "EmpNonRetail_HighInc         0       1.363793  \n",
       "EmpNonRetail_LowInc          0      -0.881379  \n",
       "EmpRetail_HighInc            1       0.000000  \n",
       "EmpRetail_LowInc             1       0.000000  \n",
       "Theta                        0       0.749374  \n",
       "distance                     0      -0.041820  \n",
       "logsum                       0       1.020821  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jeffnewman/OneDrive - Cambridge Systematics/Git/larch/larch/model/optimization.py:306: UserWarning: slsqp may not play nicely with unbounded parameters\n",
      "if you get poor results, consider setting global bounds with model.set_cap()\n",
      "  warnings.warn( # infinite bounds # )\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><table style=\"margin-top:1px;\"><tr><th>key</th><th style=\"text-align:left;\">value</th></tr><tr><td>x</td><td style=\"text-align:left;\"><table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>EmpNonRetail_HighInc</th>\n",
       "      <td>1.363793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpNonRetail_LowInc</th>\n",
       "      <td>-0.881379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpRetail_HighInc</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpRetail_LowInc</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Theta</th>\n",
       "      <td>0.749374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>distance</th>\n",
       "      <td>-0.041820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>logsum</th>\n",
       "      <td>1.020821</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table></td></tr><tr><td>loglike</td><td style=\"text-align:left;\">-25157.726761576076</td></tr><tr><td>d_loglike</td><td style=\"text-align:left;\"><table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>EmpNonRetail_HighInc</th>\n",
       "      <td>0.003254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpNonRetail_LowInc</th>\n",
       "      <td>0.003049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpRetail_HighInc</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpRetail_LowInc</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Theta</th>\n",
       "      <td>0.006297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>distance</th>\n",
       "      <td>-0.014778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>logsum</th>\n",
       "      <td>-0.000878</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table></td></tr><tr><td>nit</td><td style=\"text-align:left;\">13</td></tr><tr><td>nfev</td><td style=\"text-align:left;\">32</td></tr><tr><td>njev</td><td style=\"text-align:left;\">13</td></tr><tr><td>status</td><td style=\"text-align:left;\">0</td></tr><tr><td>message</td><td style=\"text-align:left;\">'Optimization terminated successfully'</td></tr><tr><td>success</td><td style=\"text-align:left;\">True</td></tr><tr><td>elapsed_time</td><td style=\"text-align:left;\">0:00:03.603049</td></tr><tr><td>method</td><td style=\"text-align:left;\">'slsqp'</td></tr><tr><td>n_cases</td><td style=\"text-align:left;\">7564</td></tr><tr><td>iteration_number</td><td style=\"text-align:left;\">13</td></tr><tr><td>logloss</td><td style=\"text-align:left;\">3.325981856369127</td></tr></table></div>"
      ],
      "text/plain": [
       "┣                x: EmpNonRetail_HighInc    1.363793\n",
       "┃                   EmpNonRetail_LowInc    -0.881379\n",
       "┃                   EmpRetail_HighInc       0.000000\n",
       "┃                   EmpRetail_LowInc        0.000000\n",
       "┃                   Theta                   0.749374\n",
       "┃                   distance               -0.041820\n",
       "┃                   logsum                  1.020821\n",
       "┃                   dtype: float64\n",
       "┣          loglike: -25157.726761576076\n",
       "┣        d_loglike: EmpNonRetail_HighInc    0.003254\n",
       "┃                   EmpNonRetail_LowInc     0.003049\n",
       "┃                   EmpRetail_HighInc       0.000000\n",
       "┃                   EmpRetail_LowInc        0.000000\n",
       "┃                   Theta                   0.006297\n",
       "┃                   distance               -0.014778\n",
       "┃                   logsum                 -0.000878\n",
       "┃                   dtype: float64\n",
       "┣              nit: 13\n",
       "┣             nfev: 32\n",
       "┣             njev: 13\n",
       "┣           status: 0\n",
       "┣          message: 'Optimization terminated successfully'\n",
       "┣          success: True\n",
       "┣     elapsed_time: datetime.timedelta(seconds=3, microseconds=603049)\n",
       "┣           method: 'slsqp'\n",
       "┣          n_cases: 7564\n",
       "┣ iteration_number: 13\n",
       "┣          logloss: 3.325981856369127"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.maximize_loglike()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After we find the best fitting parameters, we can compute\n",
    "some variance-covariance statistics, incuding standard errors of\n",
    "the estimates and t statistics, using `calculate_parameter_covariance`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "m.calculate_parameter_covariance()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we can review the results in a variety of report tables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "    #T_e7c30_ th {\n",
       "          vertical-align: top;\n",
       "          text-align: left;\n",
       "    }    #T_e7c30_ td {\n",
       "          vertical-align: top;\n",
       "          text-align: left;\n",
       "    }#T_e7c30_row0_col0,#T_e7c30_row0_col1,#T_e7c30_row0_col2,#T_e7c30_row0_col3,#T_e7c30_row0_col4,#T_e7c30_row1_col0,#T_e7c30_row1_col1,#T_e7c30_row1_col2,#T_e7c30_row1_col3,#T_e7c30_row1_col4,#T_e7c30_row2_col0,#T_e7c30_row2_col1,#T_e7c30_row2_col2,#T_e7c30_row2_col3,#T_e7c30_row2_col4,#T_e7c30_row3_col0,#T_e7c30_row3_col1,#T_e7c30_row3_col2,#T_e7c30_row3_col3,#T_e7c30_row3_col4,#T_e7c30_row4_col0,#T_e7c30_row4_col1,#T_e7c30_row4_col2,#T_e7c30_row4_col3,#T_e7c30_row4_col4,#T_e7c30_row5_col0,#T_e7c30_row5_col1,#T_e7c30_row5_col2,#T_e7c30_row5_col3,#T_e7c30_row5_col4,#T_e7c30_row6_col0,#T_e7c30_row6_col1,#T_e7c30_row6_col2,#T_e7c30_row6_col3,#T_e7c30_row6_col4{\n",
       "            font-family: monospace;\n",
       "        }</style><table id=\"T_e7c30_\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Value</th>        <th class=\"col_heading level0 col1\" >Std Err</th>        <th class=\"col_heading level0 col2\" >t Stat</th>        <th class=\"col_heading level0 col3\" >Signif</th>        <th class=\"col_heading level0 col4\" >Null Value</th>        <th class=\"col_heading level0 col5\" >Constrained</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_e7c30_level0_row0\" class=\"row_heading level0 row0\" >EmpNonRetail_HighInc</th>\n",
       "                        <td id=\"T_e7c30_row0_col0\" class=\"data row0 col0\" > 1.36</td>\n",
       "                        <td id=\"T_e7c30_row0_col1\" class=\"data row0 col1\" > 0.256</td>\n",
       "                        <td id=\"T_e7c30_row0_col2\" class=\"data row0 col2\" > 5.32</td>\n",
       "                        <td id=\"T_e7c30_row0_col3\" class=\"data row0 col3\" >***</td>\n",
       "                        <td id=\"T_e7c30_row0_col4\" class=\"data row0 col4\" > 0.00</td>\n",
       "                        <td id=\"T_e7c30_row0_col5\" class=\"data row0 col5\" ></td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_e7c30_level0_row1\" class=\"row_heading level0 row1\" >EmpNonRetail_LowInc</th>\n",
       "                        <td id=\"T_e7c30_row1_col0\" class=\"data row1 col0\" >-0.881</td>\n",
       "                        <td id=\"T_e7c30_row1_col1\" class=\"data row1 col1\" > 0.0791</td>\n",
       "                        <td id=\"T_e7c30_row1_col2\" class=\"data row1 col2\" >-11.14</td>\n",
       "                        <td id=\"T_e7c30_row1_col3\" class=\"data row1 col3\" >***</td>\n",
       "                        <td id=\"T_e7c30_row1_col4\" class=\"data row1 col4\" > 0.00</td>\n",
       "                        <td id=\"T_e7c30_row1_col5\" class=\"data row1 col5\" ></td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_e7c30_level0_row2\" class=\"row_heading level0 row2\" >EmpRetail_HighInc</th>\n",
       "                        <td id=\"T_e7c30_row2_col0\" class=\"data row2 col0\" > 0.00</td>\n",
       "                        <td id=\"T_e7c30_row2_col1\" class=\"data row2 col1\" > NA</td>\n",
       "                        <td id=\"T_e7c30_row2_col2\" class=\"data row2 col2\" > NA</td>\n",
       "                        <td id=\"T_e7c30_row2_col3\" class=\"data row2 col3\" ></td>\n",
       "                        <td id=\"T_e7c30_row2_col4\" class=\"data row2 col4\" > 0.00</td>\n",
       "                        <td id=\"T_e7c30_row2_col5\" class=\"data row2 col5\" >fixed value</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_e7c30_level0_row3\" class=\"row_heading level0 row3\" >EmpRetail_LowInc</th>\n",
       "                        <td id=\"T_e7c30_row3_col0\" class=\"data row3 col0\" > 0.00</td>\n",
       "                        <td id=\"T_e7c30_row3_col1\" class=\"data row3 col1\" > NA</td>\n",
       "                        <td id=\"T_e7c30_row3_col2\" class=\"data row3 col2\" > NA</td>\n",
       "                        <td id=\"T_e7c30_row3_col3\" class=\"data row3 col3\" ></td>\n",
       "                        <td id=\"T_e7c30_row3_col4\" class=\"data row3 col4\" > 0.00</td>\n",
       "                        <td id=\"T_e7c30_row3_col5\" class=\"data row3 col5\" >fixed value</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_e7c30_level0_row4\" class=\"row_heading level0 row4\" >Theta</th>\n",
       "                        <td id=\"T_e7c30_row4_col0\" class=\"data row4 col0\" > 0.749</td>\n",
       "                        <td id=\"T_e7c30_row4_col1\" class=\"data row4 col1\" > 0.0152</td>\n",
       "                        <td id=\"T_e7c30_row4_col2\" class=\"data row4 col2\" >-16.45</td>\n",
       "                        <td id=\"T_e7c30_row4_col3\" class=\"data row4 col3\" >***</td>\n",
       "                        <td id=\"T_e7c30_row4_col4\" class=\"data row4 col4\" > 1.00</td>\n",
       "                        <td id=\"T_e7c30_row4_col5\" class=\"data row4 col5\" ></td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_e7c30_level0_row5\" class=\"row_heading level0 row5\" >distance</th>\n",
       "                        <td id=\"T_e7c30_row5_col0\" class=\"data row5 col0\" >-0.0418</td>\n",
       "                        <td id=\"T_e7c30_row5_col1\" class=\"data row5 col1\" > 0.0107</td>\n",
       "                        <td id=\"T_e7c30_row5_col2\" class=\"data row5 col2\" >-3.90</td>\n",
       "                        <td id=\"T_e7c30_row5_col3\" class=\"data row5 col3\" >***</td>\n",
       "                        <td id=\"T_e7c30_row5_col4\" class=\"data row5 col4\" > 0.00</td>\n",
       "                        <td id=\"T_e7c30_row5_col5\" class=\"data row5 col5\" ></td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_e7c30_level0_row6\" class=\"row_heading level0 row6\" >logsum</th>\n",
       "                        <td id=\"T_e7c30_row6_col0\" class=\"data row6 col0\" > 1.02</td>\n",
       "                        <td id=\"T_e7c30_row6_col1\" class=\"data row6 col1\" > 0.0317</td>\n",
       "                        <td id=\"T_e7c30_row6_col2\" class=\"data row6 col2\" > 32.16</td>\n",
       "                        <td id=\"T_e7c30_row6_col3\" class=\"data row6 col3\" >***</td>\n",
       "                        <td id=\"T_e7c30_row6_col4\" class=\"data row6 col4\" > 0.00</td>\n",
       "                        <td id=\"T_e7c30_row6_col5\" class=\"data row6 col5\" ></td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fe6f87c7130>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.parameter_summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><table><thead><tr><th>Statistic</th><th>Aggregate</th><th>Per Case</th></tr><tr><td>Number of Cases</td><td colspan=\"2\">7564</td></tr><tr><td>Log Likelihood at Convergence</td><td>-25157.73</td><td>-3.33</td></tr><tr><td>Log Likelihood at Null Parameters</td><td>-28238.34</td><td>-3.73</td></tr><tr><td>Rho Squared w.r.t. Null Parameters</td><td colspan=\"2\">0.109</td></tr></thead><tbody></tbody></table></div>"
      ],
      "text/plain": [
       "<xmle.Elem 'div' with 1 children>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.estimation_statistics()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><table class=\"floatinghead\" style=\"margin-top:1px;\"><tr><td style=\"text-align:left;\"><div></div> + <span class=\"LinearFunc_Param\">P.logsum</span> * <span class=\"LinearFunc_Data\">X.logsum</span><br> + <span class=\"LinearFunc_Param\">P.distance</span> * <span class=\"LinearFunc_Data\">X.distance</span><br> + <span class=\"Larch_Parameter\">P.Theta</span> * log(<br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpRetail_HighInc</span>) * <span class=\"LinearFunc_Data\">X('RETAIL_EMP * (INCOME&gt;50000)')</span><br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpNonRetail_HighInc</span>) * <span class=\"LinearFunc_Data\">X('NONRETAIL_EMP*(INCOME&gt;50000)')</span><br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpRetail_LowInc</span>) * <span class=\"LinearFunc_Data\">X('RETAIL_EMP*(INCOME&lt;=50000)')</span><br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpNonRetail_LowInc</span>) * <span class=\"LinearFunc_Data\">X('NONRETAIL_EMP*(INCOME&lt;=50000)')</span><br>)</td></tr></table></div>"
      ],
      "text/plain": [
       "<xmle.Elem 'div' with 1 children>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.utility_functions()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Visualization\n",
    "\n",
    "For destination choice and similar type models, it might \n",
    "be beneficial to review the observed and modeled choices, \n",
    "and the relative distribution of these choices across \n",
    "different factors. For example, we would probably want \n",
    "to see the distribution of travel distance. The `Model`\n",
    "object includes a built-in method to create this kind \n",
    "of visualization.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='distance', ylabel='Relative Frequency'>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.distribution_on_idca_variable('distance')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Coincidence Ratio\n",
    "\n",
    "One way of checking trip length frequency distributions is through the use of coincidence ratios. This is most easily understood as the area under both curves divided by the area under at least one of the curves, when the observed and modeled trip length frequency distributions are plotted. Mathematically, the sum of the lower value of the two distributions at each increment of time or distance is divided by the sum of the higher value of the two distributions at each increment. Generally, the coincidence ratio measures the percent of area that “coincides” for the two curves.\n",
    "\n",
    "The procedure to calculate the coincidence of distributions is as follows:\n",
    "\n",
    "\n",
    "$$\n",
    "\\frac\n",
    "{\\sum_T \\min(PM_T,PO_T)}\n",
    "{\\sum_T \\max(PM_T,PO_T)}\n",
    "$$\n",
    "\n",
    "- $PM_T$ is the proportion of modeled distribution in interval $T$\n",
    "- $PO_T$ is the proportion of observed distribution in interval $T$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = m.dataframes.data_ca['distance']\n",
    "\n",
    "y1, x1 = np.histogram(\n",
    "    x,\n",
    "    weights=m.probability().reshape(-1),\n",
    "    bins=50,\n",
    "    density=True,\n",
    ")\n",
    "\n",
    "y2, x2 = numpy.histogram(\n",
    "    x,\n",
    "    weights=m.dataframes.data_ch.to_numpy().reshape(-1),\n",
    "    bins=x1,\n",
    "    density=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9571462824426119"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coincidence_ratio = np.minimum(y1, y2).sum() / np.maximum(y1, y2).sum()\n",
    "coincidence_ratio"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Other Distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='TAZ_AREA_TYPE', ylabel='Relative Frequency'>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.distribution_on_idca_variable(\n",
    "    m.dataservice.data_ca.TAZ_AREA_TYPE\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `distribution_on_idca_variable` has a variety of options, \n",
    "for example to control the number and range of the histogram bins:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='distance', ylabel='Relative Frequency'>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.distribution_on_idca_variable('distance', bins=40, range=(0,10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, the histogram style can be swapped out for a smoothed \n",
    "[kernel density function](https://en.wikipedia.org/wiki/Kernel_density_estimation),\n",
    "by setting the `style` argument to `'kde'`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='distance', ylabel='Relative Frequency'>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.distribution_on_idca_variable(\n",
    "    'distance',\n",
    "    style='kde',\n",
    "    range=(0,13),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Subsets of the observations can be pulled out, \n",
    "to observe the distribution conditional on other \n",
    "*idco* factors, like income."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='distance', ylabel='Relative Frequency'>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.distribution_on_idca_variable(\n",
    "    'distance',\n",
    "    subselector='INCOME<10000',\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is also possible to customize some cosmetic parts of\n",
    "the generated figure, for example attaching a title or\n",
    "giving a more detailed and well formatted label for the\n",
    "x-axis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Distance (miles)', ylabel='Relative Frequency'>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.distribution_on_idca_variable(\n",
    "    'distance',\n",
    "    xlabel=\"Distance (miles)\",\n",
    "    bins=26,\n",
    "    subselector='INCOME<10000',\n",
    "    range=(0,13),\n",
    "    header='Destination Distance, Very Low Income (<$10k) Households',\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, a `matplotlib.Axes` instance can be passed to the \n",
    "`distribution_on_idca_variable` function as the `ax` argument, and\n",
    "the figure will be drawn there.  This allows full customizability\n",
    "of the rest of the figure using the usual matplotlib features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "fig, axes = plt.subplots(1,3, figsize=(12,4))\n",
    "\n",
    "income_categories = {\n",
    "    'Low Income': 'INCOME<10000',\n",
    "    'Mid Income': '(10000<=INCOME) & (INCOME<50000)',\n",
    "    'High Income': 'INCOME>=50000',\n",
    "}\n",
    "\n",
    "for ax, (inc_title, inc) in zip(axes, income_categories.items()):\n",
    "    m.distribution_on_idca_variable(\n",
    "        'distance',\n",
    "        subselector=inc,\n",
    "        ax=ax,\n",
    "        range=(0,13),\n",
    "    )\n",
    "    ax.set_title(inc_title)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save and Report Model\n",
    "\n",
    "If we are satisified with this model, or if we just want to record \n",
    "it as part of our workflow while exploring different model\n",
    "structures, we can write the model out to a report.  To do so,\n",
    "we can instantiatie a `larch.Reporter` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "report = larch.Reporter(title=m.title)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, we can push section headings and report pieces into the\n",
    "report using the \"<<\" operator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h1><a name=\"rx1\" reftxt=\"Parameter Summary\" class=\"toc\" toclevel=\"1\"></a>Parameter Summary</h1><div><style type=\"text/css\">\n",
       "    #T_3575d_ th {\n",
       "          vertical-align: top;\n",
       "          text-align: left;\n",
       "    }    #T_3575d_ td {\n",
       "          vertical-align: top;\n",
       "          text-align: left;\n",
       "    }#T_3575d_row0_col0,#T_3575d_row0_col1,#T_3575d_row0_col2,#T_3575d_row0_col3,#T_3575d_row0_col4,#T_3575d_row1_col0,#T_3575d_row1_col1,#T_3575d_row1_col2,#T_3575d_row1_col3,#T_3575d_row1_col4,#T_3575d_row2_col0,#T_3575d_row2_col1,#T_3575d_row2_col2,#T_3575d_row2_col3,#T_3575d_row2_col4,#T_3575d_row3_col0,#T_3575d_row3_col1,#T_3575d_row3_col2,#T_3575d_row3_col3,#T_3575d_row3_col4,#T_3575d_row4_col0,#T_3575d_row4_col1,#T_3575d_row4_col2,#T_3575d_row4_col3,#T_3575d_row4_col4,#T_3575d_row5_col0,#T_3575d_row5_col1,#T_3575d_row5_col2,#T_3575d_row5_col3,#T_3575d_row5_col4,#T_3575d_row6_col0,#T_3575d_row6_col1,#T_3575d_row6_col2,#T_3575d_row6_col3,#T_3575d_row6_col4{\n",
       "            font-family: monospace;\n",
       "        }</style><table id=\"T_3575d_\"><thead>    <tr>        <th class=\"blank level0\"></th>        <th class=\"col_heading level0 col0\">Value</th>        <th class=\"col_heading level0 col1\">Std Err</th>        <th class=\"col_heading level0 col2\">t Stat</th>        <th class=\"col_heading level0 col3\">Signif</th>        <th class=\"col_heading level0 col4\">Null Value</th>        <th class=\"col_heading level0 col5\">Constrained</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_3575d_level0_row0\" class=\"row_heading level0 row0\">EmpNonRetail_HighInc</th>\n",
       "                        <td id=\"T_3575d_row0_col0\" class=\"data row0 col0\"> 1.36</td>\n",
       "                        <td id=\"T_3575d_row0_col1\" class=\"data row0 col1\"> 0.256</td>\n",
       "                        <td id=\"T_3575d_row0_col2\" class=\"data row0 col2\"> 5.32</td>\n",
       "                        <td id=\"T_3575d_row0_col3\" class=\"data row0 col3\">***</td>\n",
       "                        <td id=\"T_3575d_row0_col4\" class=\"data row0 col4\"> 0.00</td>\n",
       "                        <td id=\"T_3575d_row0_col5\" class=\"data row0 col5\"></td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_3575d_level0_row1\" class=\"row_heading level0 row1\">EmpNonRetail_LowInc</th>\n",
       "                        <td id=\"T_3575d_row1_col0\" class=\"data row1 col0\">-0.881</td>\n",
       "                        <td id=\"T_3575d_row1_col1\" class=\"data row1 col1\"> 0.0791</td>\n",
       "                        <td id=\"T_3575d_row1_col2\" class=\"data row1 col2\">-11.14</td>\n",
       "                        <td id=\"T_3575d_row1_col3\" class=\"data row1 col3\">***</td>\n",
       "                        <td id=\"T_3575d_row1_col4\" class=\"data row1 col4\"> 0.00</td>\n",
       "                        <td id=\"T_3575d_row1_col5\" class=\"data row1 col5\"></td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_3575d_level0_row2\" class=\"row_heading level0 row2\">EmpRetail_HighInc</th>\n",
       "                        <td id=\"T_3575d_row2_col0\" class=\"data row2 col0\"> 0.00</td>\n",
       "                        <td id=\"T_3575d_row2_col1\" class=\"data row2 col1\"> NA</td>\n",
       "                        <td id=\"T_3575d_row2_col2\" class=\"data row2 col2\"> NA</td>\n",
       "                        <td id=\"T_3575d_row2_col3\" class=\"data row2 col3\"></td>\n",
       "                        <td id=\"T_3575d_row2_col4\" class=\"data row2 col4\"> 0.00</td>\n",
       "                        <td id=\"T_3575d_row2_col5\" class=\"data row2 col5\">fixed value</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_3575d_level0_row3\" class=\"row_heading level0 row3\">EmpRetail_LowInc</th>\n",
       "                        <td id=\"T_3575d_row3_col0\" class=\"data row3 col0\"> 0.00</td>\n",
       "                        <td id=\"T_3575d_row3_col1\" class=\"data row3 col1\"> NA</td>\n",
       "                        <td id=\"T_3575d_row3_col2\" class=\"data row3 col2\"> NA</td>\n",
       "                        <td id=\"T_3575d_row3_col3\" class=\"data row3 col3\"></td>\n",
       "                        <td id=\"T_3575d_row3_col4\" class=\"data row3 col4\"> 0.00</td>\n",
       "                        <td id=\"T_3575d_row3_col5\" class=\"data row3 col5\">fixed value</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_3575d_level0_row4\" class=\"row_heading level0 row4\">Theta</th>\n",
       "                        <td id=\"T_3575d_row4_col0\" class=\"data row4 col0\"> 0.749</td>\n",
       "                        <td id=\"T_3575d_row4_col1\" class=\"data row4 col1\"> 0.0152</td>\n",
       "                        <td id=\"T_3575d_row4_col2\" class=\"data row4 col2\">-16.45</td>\n",
       "                        <td id=\"T_3575d_row4_col3\" class=\"data row4 col3\">***</td>\n",
       "                        <td id=\"T_3575d_row4_col4\" class=\"data row4 col4\"> 1.00</td>\n",
       "                        <td id=\"T_3575d_row4_col5\" class=\"data row4 col5\"></td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_3575d_level0_row5\" class=\"row_heading level0 row5\">distance</th>\n",
       "                        <td id=\"T_3575d_row5_col0\" class=\"data row5 col0\">-0.0418</td>\n",
       "                        <td id=\"T_3575d_row5_col1\" class=\"data row5 col1\"> 0.0107</td>\n",
       "                        <td id=\"T_3575d_row5_col2\" class=\"data row5 col2\">-3.90</td>\n",
       "                        <td id=\"T_3575d_row5_col3\" class=\"data row5 col3\">***</td>\n",
       "                        <td id=\"T_3575d_row5_col4\" class=\"data row5 col4\"> 0.00</td>\n",
       "                        <td id=\"T_3575d_row5_col5\" class=\"data row5 col5\"></td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_3575d_level0_row6\" class=\"row_heading level0 row6\">logsum</th>\n",
       "                        <td id=\"T_3575d_row6_col0\" class=\"data row6 col0\"> 1.02</td>\n",
       "                        <td id=\"T_3575d_row6_col1\" class=\"data row6 col1\"> 0.0317</td>\n",
       "                        <td id=\"T_3575d_row6_col2\" class=\"data row6 col2\"> 32.16</td>\n",
       "                        <td id=\"T_3575d_row6_col3\" class=\"data row6 col3\">***</td>\n",
       "                        <td id=\"T_3575d_row6_col4\" class=\"data row6 col4\"> 0.00</td>\n",
       "                        <td id=\"T_3575d_row6_col5\" class=\"data row6 col5\"></td>\n",
       "            </tr>\n",
       "    </tbody></table></div>"
      ],
      "text/plain": [
       "<xmle.Elem 'div' with 3 children>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.append('# Parameter Summary')\n",
    "report.append(m.parameter_summary())\n",
    "report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h1><a name=\"rx2\" reftxt=\"Estimation Statistics\" class=\"toc\" toclevel=\"1\"></a>Estimation Statistics</h1><div><table><thead><tr><th>Statistic</th><th>Aggregate</th><th>Per Case</th></tr><tr><td>Number of Cases</td><td colspan=\"2\">7564</td></tr><tr><td>Log Likelihood at Convergence</td><td>-25157.73</td><td>-3.33</td></tr><tr><td>Log Likelihood at Null Parameters</td><td>-28238.34</td><td>-3.73</td></tr><tr><td>Rho Squared w.r.t. Null Parameters</td><td colspan=\"2\">0.109</td></tr></thead><tbody></tbody></table></div>"
      ],
      "text/plain": [
       "<xmle.Elem 'div' with 5 children>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.append(\"# Estimation Statistics\")\n",
    "report.append(m.estimation_statistics())\n",
    "report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h1><a name=\"rx3\" reftxt=\"Utility Functions\" class=\"toc\" toclevel=\"1\"></a>Utility Functions</h1><div><table class=\"floatinghead\" style=\"margin-top:1px;\"><tr><td style=\"text-align:left;\"><div></div> + <span class=\"LinearFunc_Param\">P.logsum</span> * <span class=\"LinearFunc_Data\">X.logsum</span><br> + <span class=\"LinearFunc_Param\">P.distance</span> * <span class=\"LinearFunc_Data\">X.distance</span><br> + <span class=\"Larch_Parameter\">P.Theta</span> * log(<br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpRetail_HighInc</span>) * <span class=\"LinearFunc_Data\">X('RETAIL_EMP * (INCOME&gt;50000)')</span><br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpNonRetail_HighInc</span>) * <span class=\"LinearFunc_Data\">X('NONRETAIL_EMP*(INCOME&gt;50000)')</span><br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpRetail_LowInc</span>) * <span class=\"LinearFunc_Data\">X('RETAIL_EMP*(INCOME&lt;=50000)')</span><br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpNonRetail_LowInc</span>) * <span class=\"LinearFunc_Data\">X('NONRETAIL_EMP*(INCOME&lt;=50000)')</span><br>)</td></tr></table></div>"
      ],
      "text/plain": [
       "<xmle.Elem 'div' with 7 children>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.append(\"# Utility Functions\")\n",
    "report.append(m.utility_functions())\n",
    "report"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we have assembled the report, we can save the file to \n",
    "disk as an HTML report containing the content previously \n",
    "assembled. Attaching the model itself to the report as\n",
    "metadata can be done within the `save` method, which will\n",
    "allow us to directly reload the same model again later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/tmp/exampville_destination_choice.html'"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.save(\n",
    "    '/tmp/exampville_destination_choice.html', \n",
    "    overwrite=True, \n",
    "    metadata=m,\n",
    ")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
