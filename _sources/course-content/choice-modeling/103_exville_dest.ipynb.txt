{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exampville Destination Choice\n",
    "\n",
    "In this notebook, we will walk through the estimation of a tour \n",
    "destination choice model for \n",
    "Exampville, an entirely fictional town built for the express purpose of \n",
    "demostrating the use of discrete choice modeling tools for transportation \n",
    "planning.\n",
    "\n",
    "This example will assume the reader is familiar with the \n",
    "mathematical basics of destination choice\n",
    "modeling generally, and will focus on the technical \n",
    "aspects of estimating the parameters\n",
    "of a destination choice model in Python using Larch."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you have not yet estimated parameters of a mode choice model\n",
    "or generated logsums from that model, you should go back and\n",
    "review those sections before you begin this one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import larch, numpy, pandas, os\n",
    "from larch import P, X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preparation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To begin, we will re-load the data files from our tour mode choice example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import larch.exampville\n",
    "\n",
    "hh = pandas.read_csv( larch.exampville.files.hh )\n",
    "pp = pandas.read_csv( larch.exampville.files.person )\n",
    "tour = pandas.read_csv( larch.exampville.files.tour )\n",
    "skims = larch.OMX( larch.exampville.files.skims, mode='r' )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll also load an employment file. This file contains employment\n",
    "data by TAZ.  The TAZ's will be the choices in the destination \n",
    "choice model, and the employment data will allow us to characterize\n",
    "the number of opportunities in each TAZ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 40 entries, 1 to 40\n",
      "Data columns (total 3 columns):\n",
      " #   Column         Non-Null Count  Dtype\n",
      "---  ------         --------------  -----\n",
      " 0   NONRETAIL_EMP  40 non-null     int64\n",
      " 1   RETAIL_EMP     40 non-null     int64\n",
      " 2   TOTAL_EMP      40 non-null     int64\n",
      "dtypes: int64(3)\n",
      "memory usage: 1.2 KB\n"
     ]
    }
   ],
   "source": [
    "emp = pandas.read_csv(larch.exampville.files.employment, index_col='TAZ')\n",
    "emp.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll also load the saved logsums from the mode choice estimation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "logsums = pandas.read_pickle('/tmp/logsums.pkl.gz')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll replicate the pre-processing used in the mode choice estimation,\n",
    "to merge the household and person characteristics into the tours data,\n",
    "add the index values for the home TAZ's, filter to include only \n",
    "work tours, and merge with the level of service skims. (If this \n",
    "pre-processing was computationally expensive, it would probably have\n",
    "been better to save the results to disk and reload them as needed,\n",
    "but for this model these commands will run almost instantaneously.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "co = tour.merge(hh, on='HHID').merge(pp, on=('HHID', 'PERSONID'))\n",
    "co[\"HOMETAZi\"] = co[\"HOMETAZ\"] - 1\n",
    "co[\"DTAZi\"] = co[\"DTAZ\"] - 1\n",
    "co = co[co.TOURPURP == 1]\n",
    "co.index.name = 'CASE_ID'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this destination choice model, we'll want to use the mode choice\n",
    "logsums we calculated previously, and we'll use these values as data.  The alternatives in\n",
    "the destinations model are much more regular than in the mode choice \n",
    "model -- the utility function for each destination will have a common\n",
    "form -- we'll use `idca` format to make data management simpler.  This\n",
    "format maintains a data array in three dimensions instead of two: cases,\n",
    "alternatives, and variables.  We can still use a pandas.DataFrame to\n",
    "hold this data, but we'll use a `MultiIndex` for one of the typical \n",
    "dimensions.\n",
    "\n",
    "We already have one `idca` format variable: the logsums we loaded above.\n",
    "For a destination choice model, we'll often also want to use distance\n",
    "--specifically, the distance from the known origin zone to each possible\n",
    "destination zones.  We can create a distance variable as an array,\n",
    "selecting for each case in the `co` data a row from the 'AUTO_DIST'\n",
    "array that matches the correct origin zone (by index number).\n",
    "Note that we first load the skim array into memory using `[:]` and then\n",
    "select the rows, to overcome a technical limitation of the PyTables\n",
    "library (which underpins the open matrix format) that prevents us \n",
    "from reading the final array directly from the file on disk."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "distance = pandas.DataFrame(\n",
    "    skims.AUTO_DIST[:][co[\"HOMETAZi\"], :],\n",
    "    index=co.index,\n",
    "    columns=skims.TAZ_ID,\n",
    ") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CASE_ID  TAZ_ID\n",
       "0        1         8.286090\n",
       "         2         8.256698\n",
       "         3         2.928829\n",
       "         4         5.502758\n",
       "         5         5.882862\n",
       "                     ...   \n",
       "20736    36        5.217099\n",
       "         37        1.832760\n",
       "         38        2.816438\n",
       "         39        4.940639\n",
       "         40        3.047736\n",
       "Length: 302560, dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distance.stack()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The distance and logsum arrays are both currently formatted as \n",
    "single variables stored in two-dimensional format (cases by\n",
    "alternatives) but to concatenate them together, we can use the \n",
    "`unstack` command to convert each into a one-dimensional array.\n",
    "We'll also use the `rename` command to ensure that each \n",
    "one-dimensional array is named appropriately, so that when they\n",
    "are concatenate the result will include the names of the \n",
    "variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "ca = pandas.concat([\n",
    "    distance.stack().rename(\"distance\"),\n",
    "    logsums.stack().rename(\"logsum\"), \n",
    "], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have our two variables in the correct format:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>distance</th>\n",
       "      <th>logsum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>TAZ_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">0</th>\n",
       "      <th>1</th>\n",
       "      <td>8.286090</td>\n",
       "      <td>-2.935609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.256698</td>\n",
       "      <td>-2.660434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.928829</td>\n",
       "      <td>-1.745653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.502758</td>\n",
       "      <td>-2.229279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.882862</td>\n",
       "      <td>-2.403116</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          distance    logsum\n",
       "  TAZ_ID                    \n",
       "0 1       8.286090 -2.935609\n",
       "  2       8.256698 -2.660434\n",
       "  3       2.928829 -1.745653\n",
       "  4       5.502758 -2.229279\n",
       "  5       5.882862 -2.403116"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ca.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll also need to join employment data to the `ca` DataFrame.  This data has unique \n",
    "values only by alternative and not by caseid, so there are only\n",
    "40 unique rows.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 40 entries, 1 to 40\n",
      "Data columns (total 3 columns):\n",
      " #   Column         Non-Null Count  Dtype\n",
      "---  ------         --------------  -----\n",
      " 0   NONRETAIL_EMP  40 non-null     int64\n",
      " 1   RETAIL_EMP     40 non-null     int64\n",
      " 2   TOTAL_EMP      40 non-null     int64\n",
      "dtypes: int64(3)\n",
      "memory usage: 1.2 KB\n"
     ]
    }
   ],
   "source": [
    "emp.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But to make this work with the computational \n",
    "arrays required for Larch, we'll need to join this to the other \n",
    "idca data, like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "ca = ca.join(emp, on='TAZ_ID')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([b'SUB', b'SUB', b'URB', b'URB', b'SUB', b'URB', b'SUB', b'SUB',\n",
       "       b'SUB', b'SUB', b'SUB', b'SUB', b'SUB', b'SUB', b'SUB', b'SUB',\n",
       "       b'SUB', b'SUB', b'SUB', b'SUB', b'SUB', b'SUB', b'SUB', b'SUB',\n",
       "       b'URB', b'SUB', b'SUB', b'URB', b'SUB', b'SUB', b'SUB', b'SUB',\n",
       "       b'SUB', b'SUB', b'URB', b'CBD', b'SUB', b'SUB', b'SUB', b'SUB'],\n",
       "      dtype='|S3')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "skims.TAZ_AREA_TYPE[:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also extract an 'Area Type' variable \n",
    "from the skims, and attach that as well:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     b'SUB'\n",
       "2     b'SUB'\n",
       "3     b'URB'\n",
       "4     b'URB'\n",
       "5     b'SUB'\n",
       "6     b'URB'\n",
       "7     b'SUB'\n",
       "8     b'SUB'\n",
       "9     b'SUB'\n",
       "10    b'SUB'\n",
       "11    b'SUB'\n",
       "12    b'SUB'\n",
       "13    b'SUB'\n",
       "14    b'SUB'\n",
       "15    b'SUB'\n",
       "16    b'SUB'\n",
       "17    b'SUB'\n",
       "18    b'SUB'\n",
       "19    b'SUB'\n",
       "20    b'SUB'\n",
       "21    b'SUB'\n",
       "22    b'SUB'\n",
       "23    b'SUB'\n",
       "24    b'SUB'\n",
       "25    b'URB'\n",
       "26    b'SUB'\n",
       "27    b'SUB'\n",
       "28    b'URB'\n",
       "29    b'SUB'\n",
       "30    b'SUB'\n",
       "31    b'SUB'\n",
       "32    b'SUB'\n",
       "33    b'SUB'\n",
       "34    b'SUB'\n",
       "35    b'URB'\n",
       "36    b'CBD'\n",
       "37    b'SUB'\n",
       "38    b'SUB'\n",
       "39    b'SUB'\n",
       "40    b'SUB'\n",
       "Name: TAZ_AREA_TYPE, dtype: category\n",
       "Categories (3, object): [b'CBD', b'SUB', b'URB']"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "area_type = pandas.Series(\n",
    "    skims.TAZ_AREA_TYPE[:],\n",
    "    index=skims.TAZ_ID[:],\n",
    "    name ='TAZ_AREA_TYPE',\n",
    ").astype('category')\n",
    "area_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "ca = ca.join(area_type, on='TAZ_ID')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>distance</th>\n",
       "      <th>logsum</th>\n",
       "      <th>NONRETAIL_EMP</th>\n",
       "      <th>RETAIL_EMP</th>\n",
       "      <th>TOTAL_EMP</th>\n",
       "      <th>TAZ_AREA_TYPE</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>TAZ_ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">0</th>\n",
       "      <th>1</th>\n",
       "      <td>8.286090</td>\n",
       "      <td>-2.935609</td>\n",
       "      <td>118</td>\n",
       "      <td>340</td>\n",
       "      <td>458</td>\n",
       "      <td>b'SUB'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8.256698</td>\n",
       "      <td>-2.660434</td>\n",
       "      <td>91</td>\n",
       "      <td>0</td>\n",
       "      <td>91</td>\n",
       "      <td>b'SUB'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.928829</td>\n",
       "      <td>-1.745653</td>\n",
       "      <td>197</td>\n",
       "      <td>2</td>\n",
       "      <td>199</td>\n",
       "      <td>b'URB'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.502758</td>\n",
       "      <td>-2.229279</td>\n",
       "      <td>277</td>\n",
       "      <td>8</td>\n",
       "      <td>285</td>\n",
       "      <td>b'URB'</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.882862</td>\n",
       "      <td>-2.403116</td>\n",
       "      <td>44</td>\n",
       "      <td>13</td>\n",
       "      <td>57</td>\n",
       "      <td>b'SUB'</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          distance    logsum  NONRETAIL_EMP  RETAIL_EMP  TOTAL_EMP  \\\n",
       "  TAZ_ID                                                             \n",
       "0 1       8.286090 -2.935609            118         340        458   \n",
       "  2       8.256698 -2.660434             91           0         91   \n",
       "  3       2.928829 -1.745653            197           2        199   \n",
       "  4       5.502758 -2.229279            277           8        285   \n",
       "  5       5.882862 -2.403116             44          13         57   \n",
       "\n",
       "         TAZ_AREA_TYPE  \n",
       "  TAZ_ID                \n",
       "0 1             b'SUB'  \n",
       "  2             b'SUB'  \n",
       "  3             b'URB'  \n",
       "  4             b'URB'  \n",
       "  5             b'SUB'  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ca.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we bundle the raw data into the `larch.DataFrames` structure,\n",
    "as we did for estimation, and attach this structure to the model\n",
    "as its `dataservice`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs = larch.DataFrames(\n",
    "    co=co,\n",
    "    ca=ca,\n",
    "    alt_codes=skims.TAZ_ID, \n",
    "    alt_names=[f'TAZ{i}' for i in skims.TAZ_ID],\n",
    "    ch_name='DTAZ',\n",
    "    av=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "larch.DataFrames:  (not computation-ready)\n",
      "  n_cases: 7564\n",
      "  n_alts: 40\n",
      "  data_ca:\n",
      "    - distance      (302560 non-null float64)\n",
      "    - logsum        (302560 non-null float64)\n",
      "    - NONRETAIL_EMP (302560 non-null int64)\n",
      "    - RETAIL_EMP    (302560 non-null int64)\n",
      "    - TOTAL_EMP     (302560 non-null int64)\n",
      "    - TAZ_AREA_TYPE (302560 non-null category)\n",
      "  data_co:\n",
      "    - TOURID        (7564 non-null int64)\n",
      "    - HHID          (7564 non-null int64)\n",
      "    - PERSONID      (7564 non-null int64)\n",
      "    - DTAZ          (7564 non-null int64)\n",
      "    - TOURMODE      (7564 non-null int64)\n",
      "    - TOURPURP      (7564 non-null int64)\n",
      "    - N_STOPS       (7564 non-null int64)\n",
      "    - N_TRIPS_x     (7564 non-null int64)\n",
      "    - N_TRIPS_HBW_x (7564 non-null int64)\n",
      "    - N_TRIPS_HBO_x (7564 non-null int64)\n",
      "    - N_TRIPS_NHB_x (7564 non-null int64)\n",
      "    - X             (7564 non-null float64)\n",
      "    - Y             (7564 non-null float64)\n",
      "    - INCOME        (7564 non-null float64)\n",
      "    - N_VEHICLES    (7564 non-null int64)\n",
      "    - HHSIZE        (7564 non-null int64)\n",
      "    - geometry      (7564 non-null object)\n",
      "    - HOMETAZ       (7564 non-null int64)\n",
      "    - N_TRIPS_y     (7564 non-null int64)\n",
      "    - N_TRIPS_HBW_y (7564 non-null int64)\n",
      "    - N_TRIPS_HBO_y (7564 non-null int64)\n",
      "    - N_TRIPS_NHB_y (7564 non-null int64)\n",
      "    - N_WORKERS     (7564 non-null int64)\n",
      "    - HHIDX         (7564 non-null int64)\n",
      "    - AGE           (7564 non-null int64)\n",
      "    - WORKS         (7564 non-null int64)\n",
      "    - N_WORK_TOURS  (7564 non-null int64)\n",
      "    - N_OTHER_TOURS (7564 non-null int64)\n",
      "    - N_TOURS       (7564 non-null int64)\n",
      "    - N_TRIPS       (7564 non-null int64)\n",
      "    - N_TRIPS_HBW   (7564 non-null int64)\n",
      "    - N_TRIPS_HBO   (7564 non-null int64)\n",
      "    - N_TRIPS_NHB   (7564 non-null int64)\n",
      "    - HOMETAZi      (7564 non-null int64)\n",
      "    - DTAZi         (7564 non-null int64)\n",
      "  data_av: <populated>\n",
      "  data_ch: DTAZ\n"
     ]
    }
   ],
   "source": [
    "dfs.info(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Definition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "m = larch.Model(dataservice=dfs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Destination choice models are premised on the theory that each\n",
    "trip or tour has a particular destination to which it is attracted,\n",
    "and each travel zone represents not one individual alternative, \n",
    "but rather a number of similar alternatives grouped together.\n",
    "Thus the utility function in a destination choice model typically is \n",
    "comprised of two components: a qualitative component (i.e., how\n",
    "good are the alternatives in a zone) and a quantitative component\n",
    "(i.e., how many discrete alternatives are in a zone).  The mathematical\n",
    "form of the utility function for the zone is\n",
    "\n",
    "$$\\sum_i{\\beta_i}X_i + \\theta\\log\\left(\\sum_j{\\exp(\\gamma_j)}Z_j\\right)$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "raw_mimetype": "text/latex"
   },
   "source": [
    "The quantitative component of this utility function is\n",
    "written for Larch in a linear-in-parameters format similarly to\n",
    "that for the typical utility function, but \n",
    "assigned to the `quantity_ca` attribute instead of `utility_ca`.\n",
    "Also, the exponentiation of the $\\gamma$ parameters is implied\n",
    "by using `quantity_ca`.  Note that the quantitative term is in \n",
    "theory always applied only to the alternatives themselves and \n",
    "not alone to attributes of the decision maker, so the `quantity_co`\n",
    "attribute is not implemented and cannot be used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "m.quantity_ca = (\n",
    "        + P.EmpRetail_HighInc * X('RETAIL_EMP * (INCOME>50000)')\n",
    "        + P.EmpNonRetail_HighInc * X('NONRETAIL_EMP') * X(\"INCOME>50000\")\n",
    "        + P.EmpRetail_LowInc * X('RETAIL_EMP') * X(\"INCOME<=50000\")\n",
    "        + P.EmpNonRetail_LowInc * X('NONRETAIL_EMP') * X(\"INCOME<=50000\")\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The parameter $\\theta$ is a coefficient on the entire log-of-quantity\n",
    "term, and can be defined by assigning a parameter name to the \n",
    "`quantity_scale` attribute.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#m.quantity_scale = P.Theta"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The qualitative component of utility can be \n",
    "given in the same manner as any other discrete choice model\n",
    "in Larch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "m.utility_ca = (\n",
    "    + P.logsum * X.logsum\n",
    "    + P.distance * X.distance\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this structure, we know the model will be overspecified\n",
    "if the parameter in the quantitative portion of utility are\n",
    "all estimated, in a manner similar to the overspecification\n",
    "if alternative specific constants are all estimated. To \n",
    "prevent this problem, we can lock parameters to particular\n",
    "values as needed using the `lock_values` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "m.lock_values(\n",
    "    EmpRetail_HighInc=0,\n",
    "    EmpRetail_LowInc=0,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then let's prepare this data for estimation.  Even though the\n",
    "data is already in memory, the `load_data` method is used to \n",
    "pre-process the data, extracting the required values, pre-computing \n",
    "the values of fixed expressions, and assembling the results into\n",
    "contiguous arrays suitable for computing the log likelihood values\n",
    "efficiently."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "req_data does not request {choice_ca,choice_co,choice_co_code} but choice is set and being provided\n",
      "req_data does not request avail_ca or avail_co but it is set and being provided\n"
     ]
    }
   ],
   "source": [
    "m.load_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Estimation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h3>Iteration 009 [Optimization terminated successfully] </h3>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<p>Best LL = -25287.5271358175</p>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "      <th>initvalue</th>\n",
       "      <th>nullvalue</th>\n",
       "      <th>minimum</th>\n",
       "      <th>maximum</th>\n",
       "      <th>holdfast</th>\n",
       "      <th>note</th>\n",
       "      <th>best</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>EmpNonRetail_HighInc</th>\n",
       "      <td>0.854336</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-inf</td>\n",
       "      <td>inf</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td>0.854336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpNonRetail_LowInc</th>\n",
       "      <td>-0.756049</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-inf</td>\n",
       "      <td>inf</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td>-0.756049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpRetail_HighInc</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpRetail_LowInc</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td></td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>distance</th>\n",
       "      <td>-0.059396</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-inf</td>\n",
       "      <td>inf</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td>-0.059396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>logsum</th>\n",
       "      <td>1.081704</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-inf</td>\n",
       "      <td>inf</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "      <td>1.081704</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         value  initvalue  nullvalue  minimum  maximum  \\\n",
       "EmpNonRetail_HighInc  0.854336        0.0        0.0     -inf      inf   \n",
       "EmpNonRetail_LowInc  -0.756049        0.0        0.0     -inf      inf   \n",
       "EmpRetail_HighInc     0.000000        0.0        0.0      0.0      0.0   \n",
       "EmpRetail_LowInc      0.000000        0.0        0.0      0.0      0.0   \n",
       "distance             -0.059396        0.0        0.0     -inf      inf   \n",
       "logsum                1.081704        0.0        0.0     -inf      inf   \n",
       "\n",
       "                      holdfast note      best  \n",
       "EmpNonRetail_HighInc         0       0.854336  \n",
       "EmpNonRetail_LowInc          0      -0.756049  \n",
       "EmpRetail_HighInc            1       0.000000  \n",
       "EmpRetail_LowInc             1       0.000000  \n",
       "distance                     0      -0.059396  \n",
       "logsum                       0       1.081704  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jeffnewman/opt/anaconda3/envs/tt/lib/python3.9/site-packages/larch/model/optimization.py:306: UserWarning: slsqp may not play nicely with unbounded parameters\n",
      "if you get poor results, consider setting global bounds with model.set_cap()\n",
      "  warnings.warn( # infinite bounds # )\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><table style=\"margin-top:1px;\"><tr><th>key</th><th style=\"text-align:left;\">value</th></tr><tr><td>x</td><td style=\"text-align:left;\"><table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>EmpNonRetail_HighInc</th>\n",
       "      <td>0.854336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpNonRetail_LowInc</th>\n",
       "      <td>-0.756049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpRetail_HighInc</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpRetail_LowInc</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>distance</th>\n",
       "      <td>-0.059396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>logsum</th>\n",
       "      <td>1.081704</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table></td></tr><tr><td>loglike</td><td style=\"text-align:left;\">-25287.5271358175</td></tr><tr><td>d_loglike</td><td style=\"text-align:left;\"><table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>EmpNonRetail_HighInc</th>\n",
       "      <td>0.003384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpNonRetail_LowInc</th>\n",
       "      <td>0.006065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpRetail_HighInc</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EmpRetail_LowInc</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>distance</th>\n",
       "      <td>0.003929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>logsum</th>\n",
       "      <td>-0.002454</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table></td></tr><tr><td>nit</td><td style=\"text-align:left;\">9</td></tr><tr><td>nfev</td><td style=\"text-align:left;\">24</td></tr><tr><td>njev</td><td style=\"text-align:left;\">9</td></tr><tr><td>status</td><td style=\"text-align:left;\">0</td></tr><tr><td>message</td><td style=\"text-align:left;\">'Optimization terminated successfully'</td></tr><tr><td>success</td><td style=\"text-align:left;\">True</td></tr><tr><td>elapsed_time</td><td style=\"text-align:left;\">0:00:02.543280</td></tr><tr><td>method</td><td style=\"text-align:left;\">'slsqp'</td></tr><tr><td>n_cases</td><td style=\"text-align:left;\">7564</td></tr><tr><td>iteration_number</td><td style=\"text-align:left;\">9</td></tr><tr><td>logloss</td><td style=\"text-align:left;\">3.343142138526904</td></tr></table></div>"
      ],
      "text/plain": [
       "┣                x: EmpNonRetail_HighInc    0.854336\n",
       "┃                   EmpNonRetail_LowInc    -0.756049\n",
       "┃                   EmpRetail_HighInc       0.000000\n",
       "┃                   EmpRetail_LowInc        0.000000\n",
       "┃                   distance               -0.059396\n",
       "┃                   logsum                  1.081704\n",
       "┃                   dtype: float64\n",
       "┣          loglike: -25287.5271358175\n",
       "┣        d_loglike: EmpNonRetail_HighInc    0.003384\n",
       "┃                   EmpNonRetail_LowInc     0.006065\n",
       "┃                   EmpRetail_HighInc       0.000000\n",
       "┃                   EmpRetail_LowInc        0.000000\n",
       "┃                   distance                0.003929\n",
       "┃                   logsum                 -0.002454\n",
       "┃                   dtype: float64\n",
       "┣              nit: 9\n",
       "┣             nfev: 24\n",
       "┣             njev: 9\n",
       "┣           status: 0\n",
       "┣          message: 'Optimization terminated successfully'\n",
       "┣          success: True\n",
       "┣     elapsed_time: datetime.timedelta(seconds=2, microseconds=543280)\n",
       "┣           method: 'slsqp'\n",
       "┣          n_cases: 7564\n",
       "┣ iteration_number: 9\n",
       "┣          logloss: 3.343142138526904"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.maximize_loglike()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After we find the best fitting parameters, we can compute\n",
    "some variance-covariance statistics, incuding standard errors of\n",
    "the estimates and t statistics, using `calculate_parameter_covariance`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "m.calculate_parameter_covariance()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we can review the results in a variety of report tables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "    #T_593a7_ th {\n",
       "          vertical-align: top;\n",
       "          text-align: left;\n",
       "    }    #T_593a7_ td {\n",
       "          vertical-align: top;\n",
       "          text-align: left;\n",
       "    }#T_593a7_row0_col0,#T_593a7_row0_col1,#T_593a7_row0_col2,#T_593a7_row0_col3,#T_593a7_row0_col4,#T_593a7_row1_col0,#T_593a7_row1_col1,#T_593a7_row1_col2,#T_593a7_row1_col3,#T_593a7_row1_col4,#T_593a7_row2_col0,#T_593a7_row2_col1,#T_593a7_row2_col2,#T_593a7_row2_col3,#T_593a7_row2_col4,#T_593a7_row3_col0,#T_593a7_row3_col1,#T_593a7_row3_col2,#T_593a7_row3_col3,#T_593a7_row3_col4,#T_593a7_row4_col0,#T_593a7_row4_col1,#T_593a7_row4_col2,#T_593a7_row4_col3,#T_593a7_row4_col4,#T_593a7_row5_col0,#T_593a7_row5_col1,#T_593a7_row5_col2,#T_593a7_row5_col3,#T_593a7_row5_col4{\n",
       "            font-family: monospace;\n",
       "        }</style><table id=\"T_593a7_\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Value</th>        <th class=\"col_heading level0 col1\" >Std Err</th>        <th class=\"col_heading level0 col2\" >t Stat</th>        <th class=\"col_heading level0 col3\" >Signif</th>        <th class=\"col_heading level0 col4\" >Null Value</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_593a7_level0_row0\" class=\"row_heading level0 row0\" >EmpNonRetail_HighInc</th>\n",
       "                        <td id=\"T_593a7_row0_col0\" class=\"data row0 col0\" > 0.854</td>\n",
       "                        <td id=\"T_593a7_row0_col1\" class=\"data row0 col1\" > 0.137</td>\n",
       "                        <td id=\"T_593a7_row0_col2\" class=\"data row0 col2\" > 6.22</td>\n",
       "                        <td id=\"T_593a7_row0_col3\" class=\"data row0 col3\" >***</td>\n",
       "                        <td id=\"T_593a7_row0_col4\" class=\"data row0 col4\" > 0.00</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_593a7_level0_row1\" class=\"row_heading level0 row1\" >EmpNonRetail_LowInc</th>\n",
       "                        <td id=\"T_593a7_row1_col0\" class=\"data row1 col0\" >-0.756</td>\n",
       "                        <td id=\"T_593a7_row1_col1\" class=\"data row1 col1\" > 0.0615</td>\n",
       "                        <td id=\"T_593a7_row1_col2\" class=\"data row1 col2\" >-12.30</td>\n",
       "                        <td id=\"T_593a7_row1_col3\" class=\"data row1 col3\" >***</td>\n",
       "                        <td id=\"T_593a7_row1_col4\" class=\"data row1 col4\" > 0.00</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_593a7_level0_row2\" class=\"row_heading level0 row2\" >EmpRetail_HighInc</th>\n",
       "                        <td id=\"T_593a7_row2_col0\" class=\"data row2 col0\" > 0.00</td>\n",
       "                        <td id=\"T_593a7_row2_col1\" class=\"data row2 col1\" > 0.00</td>\n",
       "                        <td id=\"T_593a7_row2_col2\" class=\"data row2 col2\" > NA</td>\n",
       "                        <td id=\"T_593a7_row2_col3\" class=\"data row2 col3\" ></td>\n",
       "                        <td id=\"T_593a7_row2_col4\" class=\"data row2 col4\" > 0.00</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_593a7_level0_row3\" class=\"row_heading level0 row3\" >EmpRetail_LowInc</th>\n",
       "                        <td id=\"T_593a7_row3_col0\" class=\"data row3 col0\" > 0.00</td>\n",
       "                        <td id=\"T_593a7_row3_col1\" class=\"data row3 col1\" > 0.00</td>\n",
       "                        <td id=\"T_593a7_row3_col2\" class=\"data row3 col2\" > NA</td>\n",
       "                        <td id=\"T_593a7_row3_col3\" class=\"data row3 col3\" ></td>\n",
       "                        <td id=\"T_593a7_row3_col4\" class=\"data row3 col4\" > 0.00</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_593a7_level0_row4\" class=\"row_heading level0 row4\" >distance</th>\n",
       "                        <td id=\"T_593a7_row4_col0\" class=\"data row4 col0\" >-0.0594</td>\n",
       "                        <td id=\"T_593a7_row4_col1\" class=\"data row4 col1\" > 0.0107</td>\n",
       "                        <td id=\"T_593a7_row4_col2\" class=\"data row4 col2\" >-5.57</td>\n",
       "                        <td id=\"T_593a7_row4_col3\" class=\"data row4 col3\" >***</td>\n",
       "                        <td id=\"T_593a7_row4_col4\" class=\"data row4 col4\" > 0.00</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_593a7_level0_row5\" class=\"row_heading level0 row5\" >logsum</th>\n",
       "                        <td id=\"T_593a7_row5_col0\" class=\"data row5 col0\" > 1.08</td>\n",
       "                        <td id=\"T_593a7_row5_col1\" class=\"data row5 col1\" > 0.0316</td>\n",
       "                        <td id=\"T_593a7_row5_col2\" class=\"data row5 col2\" > 34.22</td>\n",
       "                        <td id=\"T_593a7_row5_col3\" class=\"data row5 col3\" >***</td>\n",
       "                        <td id=\"T_593a7_row5_col4\" class=\"data row5 col4\" > 0.00</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fa180ca7490>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.parameter_summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><table><thead><tr><th>Statistic</th><th>Aggregate</th><th>Per Case</th></tr><tr><td>Number of Cases</td><td colspan=\"2\">7564</td></tr><tr><td>Log Likelihood at Convergence</td><td>-25287.53</td><td>-3.34</td></tr><tr><td>Log Likelihood at Null Parameters</td><td>-28238.34</td><td>-3.73</td></tr><tr><td>Rho Squared w.r.t. Null Parameters</td><td colspan=\"2\">0.104</td></tr></thead><tbody></tbody></table></div>"
      ],
      "text/plain": [
       "<xmle.Elem 'div' with 1 children>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.estimation_statistics()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><table class=\"floatinghead\" style=\"margin-top:1px;\"><tr><td style=\"text-align:left;\"><div></div> + <span class=\"LinearFunc_Param\">P.logsum</span> * <span class=\"LinearFunc_Data\">X.logsum</span><br> + <span class=\"LinearFunc_Param\">P.distance</span> * <span class=\"LinearFunc_Data\">X.distance</span><br> + log(<br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpRetail_HighInc</span>) * <span class=\"LinearFunc_Data\">X('RETAIL_EMP * (INCOME&gt;50000)')</span><br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpNonRetail_HighInc</span>) * <span class=\"LinearFunc_Data\">X('NONRETAIL_EMP*(INCOME&gt;50000)')</span><br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpRetail_LowInc</span>) * <span class=\"LinearFunc_Data\">X('RETAIL_EMP*(INCOME&lt;=50000)')</span><br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpNonRetail_LowInc</span>) * <span class=\"LinearFunc_Data\">X('NONRETAIL_EMP*(INCOME&lt;=50000)')</span><br>)</td></tr></table></div>"
      ],
      "text/plain": [
       "<xmle.Elem 'div' with 1 children>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.utility_functions()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Visualization\n",
    "\n",
    "For destination choice and similar type models, it might \n",
    "be beneficial to review the observed and modeled choices, \n",
    "and the relative distribution of these choices across \n",
    "different factors. For example, we would probably want \n",
    "to see the distribution of travel distance. The `Model`\n",
    "object includes a built-in method to create this kind \n",
    "of visualization.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='distance', ylabel='Relative Frequency'>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.distribution_on_idca_variable('distance')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Coincidence Ratio\n",
    "\n",
    "One way of checking trip length frequency distributions is through the use of coincidence ratios. This is most easily understood as the area under both curves divided by the area under at least one of the curves, when the observed and modeled trip length frequency distributions are plotted. Mathematically, the sum of the lower value of the two distributions at each increment of time or distance is divided by the sum of the higher value of the two distributions at each increment. Generally, the coincidence ratio measures the percent of area that “coincides” for the two curves.\n",
    "\n",
    "The procedure to calculate the coincidence of distributions is as follows:\n",
    "\n",
    "\n",
    "$$\n",
    "\\frac\n",
    "{\\sum_T \\min(PM_T,PO_T)}\n",
    "{\\sum_T \\max(PM_T,PO_T)}\n",
    "$$\n",
    "\n",
    "- $PM_T$ is the proportion of modeled distribution in interval $T$\n",
    "- $PO_T$ is the proportion of observed distribution in interval $T$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = m.dataframes.data_ca['distance']\n",
    "\n",
    "y1, x1 = np.histogram(\n",
    "    x,\n",
    "    weights=m.probability().reshape(-1),\n",
    "    bins=50,\n",
    "    density=True,\n",
    ")\n",
    "\n",
    "y2, x2 = numpy.histogram(\n",
    "    x,\n",
    "    weights=m.dataframes.data_ch.to_numpy().reshape(-1),\n",
    "    bins=x1,\n",
    "    density=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9498246358767998"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coincidence_ratio = np.minimum(y1, y2).sum() / np.maximum(y1, y2).sum()\n",
    "coincidence_ratio"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Other Distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='TAZ_AREA_TYPE', ylabel='Relative Frequency'>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.distribution_on_idca_variable(\n",
    "    m.dataservice.data_ca.TAZ_AREA_TYPE\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `distribution_on_idca_variable` has a variety of options, \n",
    "for example to control the number and range of the histogram bins:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='distance', ylabel='Relative Frequency'>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.distribution_on_idca_variable('distance', bins=40, range=(0,10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, the histogram style can be swapped out for a smoothed \n",
    "[kernel density function](https://en.wikipedia.org/wiki/Kernel_density_estimation),\n",
    "by setting the `style` argument to `'kde'`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='distance', ylabel='Relative Frequency'>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.distribution_on_idca_variable(\n",
    "    'distance',\n",
    "    style='kde',\n",
    "    range=(0,13),\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Subsets of the observations can be pulled out, \n",
    "to observe the distribution conditional on other \n",
    "*idco* factors, like income."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='distance', ylabel='Relative Frequency'>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.distribution_on_idca_variable(\n",
    "    'distance',\n",
    "    subselector='INCOME<10000',\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is also possible to customize some cosmetic parts of\n",
    "the generated figure, for example attaching a title or\n",
    "giving a more detailed and well formatted label for the\n",
    "x-axis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Distance (miles)', ylabel='Relative Frequency'>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "m.distribution_on_idca_variable(\n",
    "    'distance',\n",
    "    xlabel=\"Distance (miles)\",\n",
    "    bins=26,\n",
    "    subselector='INCOME<10000',\n",
    "    range=(0,13),\n",
    "    header='Destination Distance, Very Low Income (<$10k) Households',\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, a `matplotlib.Axes` instance can be passed to the \n",
    "`distribution_on_idca_variable` function as the `ax` argument, and\n",
    "the figure will be drawn there.  This allows full customizability\n",
    "of the rest of the figure using the usual matplotlib features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "fig, axes = plt.subplots(1,3, figsize=(12,4))\n",
    "\n",
    "income_categories = {\n",
    "    'Low Income': 'INCOME<10000',\n",
    "    'Mid Income': '(10000<=INCOME) & (INCOME<50000)',\n",
    "    'High Income': 'INCOME>=50000',\n",
    "}\n",
    "\n",
    "for ax, (inc_title, inc) in zip(axes, income_categories.items()):\n",
    "    m.distribution_on_idca_variable(\n",
    "        'distance',\n",
    "        subselector=inc,\n",
    "        ax=ax,\n",
    "        range=(0,13),\n",
    "    )\n",
    "    ax.set_title(inc_title)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save and Report Model\n",
    "\n",
    "If we are satisified with this model, or if we just want to record \n",
    "it as part of our workflow while exploring different model\n",
    "structures, we can write the model out to a report.  To do so,\n",
    "we can instantiatie a `larch.Reporter` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "report = larch.Reporter(title=m.title)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, we can push section headings and report pieces into the\n",
    "report using the \"<<\" operator."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h1><a name=\"rx1\" reftxt=\"Parameter Summary\" class=\"toc\" toclevel=\"1\"></a>Parameter Summary</h1><div><style type=\"text/css\">\n",
       "    #T_8961c_ th {\n",
       "          vertical-align: top;\n",
       "          text-align: left;\n",
       "    }    #T_8961c_ td {\n",
       "          vertical-align: top;\n",
       "          text-align: left;\n",
       "    }#T_8961c_row0_col0,#T_8961c_row0_col1,#T_8961c_row0_col2,#T_8961c_row0_col3,#T_8961c_row0_col4,#T_8961c_row1_col0,#T_8961c_row1_col1,#T_8961c_row1_col2,#T_8961c_row1_col3,#T_8961c_row1_col4,#T_8961c_row2_col0,#T_8961c_row2_col1,#T_8961c_row2_col2,#T_8961c_row2_col3,#T_8961c_row2_col4,#T_8961c_row3_col0,#T_8961c_row3_col1,#T_8961c_row3_col2,#T_8961c_row3_col3,#T_8961c_row3_col4,#T_8961c_row4_col0,#T_8961c_row4_col1,#T_8961c_row4_col2,#T_8961c_row4_col3,#T_8961c_row4_col4,#T_8961c_row5_col0,#T_8961c_row5_col1,#T_8961c_row5_col2,#T_8961c_row5_col3,#T_8961c_row5_col4{\n",
       "            font-family: monospace;\n",
       "        }</style><table id=\"T_8961c_\"><thead>    <tr>        <th class=\"blank level0\"></th>        <th class=\"col_heading level0 col0\">Value</th>        <th class=\"col_heading level0 col1\">Std Err</th>        <th class=\"col_heading level0 col2\">t Stat</th>        <th class=\"col_heading level0 col3\">Signif</th>        <th class=\"col_heading level0 col4\">Null Value</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_8961c_level0_row0\" class=\"row_heading level0 row0\">EmpNonRetail_HighInc</th>\n",
       "                        <td id=\"T_8961c_row0_col0\" class=\"data row0 col0\"> 0.854</td>\n",
       "                        <td id=\"T_8961c_row0_col1\" class=\"data row0 col1\"> 0.137</td>\n",
       "                        <td id=\"T_8961c_row0_col2\" class=\"data row0 col2\"> 6.22</td>\n",
       "                        <td id=\"T_8961c_row0_col3\" class=\"data row0 col3\">***</td>\n",
       "                        <td id=\"T_8961c_row0_col4\" class=\"data row0 col4\"> 0.00</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_8961c_level0_row1\" class=\"row_heading level0 row1\">EmpNonRetail_LowInc</th>\n",
       "                        <td id=\"T_8961c_row1_col0\" class=\"data row1 col0\">-0.756</td>\n",
       "                        <td id=\"T_8961c_row1_col1\" class=\"data row1 col1\"> 0.0615</td>\n",
       "                        <td id=\"T_8961c_row1_col2\" class=\"data row1 col2\">-12.30</td>\n",
       "                        <td id=\"T_8961c_row1_col3\" class=\"data row1 col3\">***</td>\n",
       "                        <td id=\"T_8961c_row1_col4\" class=\"data row1 col4\"> 0.00</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_8961c_level0_row2\" class=\"row_heading level0 row2\">EmpRetail_HighInc</th>\n",
       "                        <td id=\"T_8961c_row2_col0\" class=\"data row2 col0\"> 0.00</td>\n",
       "                        <td id=\"T_8961c_row2_col1\" class=\"data row2 col1\"> 0.00</td>\n",
       "                        <td id=\"T_8961c_row2_col2\" class=\"data row2 col2\"> NA</td>\n",
       "                        <td id=\"T_8961c_row2_col3\" class=\"data row2 col3\"></td>\n",
       "                        <td id=\"T_8961c_row2_col4\" class=\"data row2 col4\"> 0.00</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_8961c_level0_row3\" class=\"row_heading level0 row3\">EmpRetail_LowInc</th>\n",
       "                        <td id=\"T_8961c_row3_col0\" class=\"data row3 col0\"> 0.00</td>\n",
       "                        <td id=\"T_8961c_row3_col1\" class=\"data row3 col1\"> 0.00</td>\n",
       "                        <td id=\"T_8961c_row3_col2\" class=\"data row3 col2\"> NA</td>\n",
       "                        <td id=\"T_8961c_row3_col3\" class=\"data row3 col3\"></td>\n",
       "                        <td id=\"T_8961c_row3_col4\" class=\"data row3 col4\"> 0.00</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_8961c_level0_row4\" class=\"row_heading level0 row4\">distance</th>\n",
       "                        <td id=\"T_8961c_row4_col0\" class=\"data row4 col0\">-0.0594</td>\n",
       "                        <td id=\"T_8961c_row4_col1\" class=\"data row4 col1\"> 0.0107</td>\n",
       "                        <td id=\"T_8961c_row4_col2\" class=\"data row4 col2\">-5.57</td>\n",
       "                        <td id=\"T_8961c_row4_col3\" class=\"data row4 col3\">***</td>\n",
       "                        <td id=\"T_8961c_row4_col4\" class=\"data row4 col4\"> 0.00</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_8961c_level0_row5\" class=\"row_heading level0 row5\">logsum</th>\n",
       "                        <td id=\"T_8961c_row5_col0\" class=\"data row5 col0\"> 1.08</td>\n",
       "                        <td id=\"T_8961c_row5_col1\" class=\"data row5 col1\"> 0.0316</td>\n",
       "                        <td id=\"T_8961c_row5_col2\" class=\"data row5 col2\"> 34.22</td>\n",
       "                        <td id=\"T_8961c_row5_col3\" class=\"data row5 col3\">***</td>\n",
       "                        <td id=\"T_8961c_row5_col4\" class=\"data row5 col4\"> 0.00</td>\n",
       "            </tr>\n",
       "    </tbody></table></div>"
      ],
      "text/plain": [
       "<xmle.Elem 'div' with 3 children>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.append('# Parameter Summary')\n",
    "report.append(m.parameter_summary())\n",
    "report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h1><a name=\"rx2\" reftxt=\"Estimation Statistics\" class=\"toc\" toclevel=\"1\"></a>Estimation Statistics</h1><div><table><thead><tr><th>Statistic</th><th>Aggregate</th><th>Per Case</th></tr><tr><td>Number of Cases</td><td colspan=\"2\">7564</td></tr><tr><td>Log Likelihood at Convergence</td><td>-25287.53</td><td>-3.34</td></tr><tr><td>Log Likelihood at Null Parameters</td><td>-28238.34</td><td>-3.73</td></tr><tr><td>Rho Squared w.r.t. Null Parameters</td><td colspan=\"2\">0.104</td></tr></thead><tbody></tbody></table></div>"
      ],
      "text/plain": [
       "<xmle.Elem 'div' with 5 children>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.append(\"# Estimation Statistics\")\n",
    "report.append(m.estimation_statistics())\n",
    "report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h1><a name=\"rx3\" reftxt=\"Utility Functions\" class=\"toc\" toclevel=\"1\"></a>Utility Functions</h1><div><table class=\"floatinghead\" style=\"margin-top:1px;\"><tr><td style=\"text-align:left;\"><div></div> + <span class=\"LinearFunc_Param\">P.logsum</span> * <span class=\"LinearFunc_Data\">X.logsum</span><br> + <span class=\"LinearFunc_Param\">P.distance</span> * <span class=\"LinearFunc_Data\">X.distance</span><br> + log(<br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpRetail_HighInc</span>) * <span class=\"LinearFunc_Data\">X('RETAIL_EMP * (INCOME&gt;50000)')</span><br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpNonRetail_HighInc</span>) * <span class=\"LinearFunc_Data\">X('NONRETAIL_EMP*(INCOME&gt;50000)')</span><br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpRetail_LowInc</span>) * <span class=\"LinearFunc_Data\">X('RETAIL_EMP*(INCOME&lt;=50000)')</span><br>   + <span></span>exp(<span class=\"LinearFunc_Param\">P.EmpNonRetail_LowInc</span>) * <span class=\"LinearFunc_Data\">X('NONRETAIL_EMP*(INCOME&lt;=50000)')</span><br>)</td></tr></table></div>"
      ],
      "text/plain": [
       "<xmle.Elem 'div' with 7 children>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.append(\"# Utility Functions\")\n",
    "report.append(m.utility_functions())\n",
    "report"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once we have assembled the report, we can save the file to \n",
    "disk as an HTML report containing the content previously \n",
    "assembled. Attaching the model itself to the report as\n",
    "metadata can be done within the `save` method, which will\n",
    "allow us to directly reload the same model again later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/tmp/exampville_destination_choice.html'"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.save(\n",
    "    '/tmp/exampville_destination_choice.html', \n",
    "    overwrite=True, \n",
    "    metadata=m,\n",
    ")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
