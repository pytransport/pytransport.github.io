{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exampville Mode Choice Logsums\n",
    "\n",
    "In this notebook, we will walk through the creation of logsums from a tour mode choice model.\n",
    "This example will assume the reader is familiar with the mathematical basics of discrete choice\n",
    "modeling generally, and will focus on the technical aspects of estimating the parameters\n",
    "of a discrete choice model in Python using Larch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import larch, numpy, pandas, os"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To begin, we will re-load the data files from our tour mode choice example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import larch.exampville\n",
    "hh = pandas.read_csv( larch.exampville.files.hh )\n",
    "pp = pandas.read_csv( larch.exampville.files.person )\n",
    "tour = pandas.read_csv( larch.exampville.files.tour )\n",
    "skims = larch.OMX( larch.exampville.files.skims, mode='r' )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll also load the saved model from the mode choice estimation.\n",
    "(If you haven't run the mode choice estimation notebook already,\n",
    "this file may not exist on your system, but you can create it \n",
    "by running that notebook.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "m = larch.read_metadata('/tmp/exampville_mode_choice.html')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll replicate the pre-processing used in the mode choice estimation,\n",
    "to merge the household and person characteristics into the tours data,\n",
    "add the index values for the home TAZ's, filter to include only \n",
    "work tours, and merge with the level of service skims.  (If this \n",
    "pre-processing was computationally expensive, it would probably have\n",
    "been better to save the results to disk and reload them as needed,\n",
    "but for this model these commands will run almost instantaneously.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "raw = tour.merge(hh, on='HHID').merge(pp, on=('HHID', 'PERSONID'))\n",
    "raw[\"HOMETAZi\"] = raw[\"HOMETAZ\"] - 1\n",
    "raw[\"DTAZi\"] = raw[\"DTAZ\"] - 1\n",
    "raw = raw[raw.TOURPURP == 1]\n",
    "raw = raw.join(\n",
    "    skims.get_rc_dataframe(\n",
    "        raw.HOMETAZi, raw.DTAZi,\n",
    "    )\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we bundle the raw data into the `larch.DataFrames` structure,\n",
    "as we did for estimation, and attach this structure to the model\n",
    "as its `dataservice`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# For clarity, we can define numbers as names for modes\n",
    "DA = 1\n",
    "SR = 2\n",
    "Walk = 3\n",
    "Bike = 4\n",
    "Transit = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs = larch.DataFrames(\n",
    "    co=raw, \n",
    "    alt_codes=[DA,SR,Walk,Bike,Transit], \n",
    "    alt_names=['DA','SR','Walk','Bike','Transit'],\n",
    "    ch_name='TOURMODE',\n",
    ")\n",
    "\n",
    "m.dataservice = dfs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll also initialize an DataFrame with zeros to hold the computed logsums.\n",
    "This DataFrame will have one row for each case in our source data,\n",
    "and a column for each possible destination zone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "logsums = pandas.DataFrame(\n",
    "    data=0.0,\n",
    "    index=raw.index, \n",
    "    columns=skims.TAZ_ID\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The logsums from a `Model` can be computed using the `Model.logsums` method.\n",
    "However, if we want the logsums for each possible destination, we'll need\n",
    "to replace the part of our data that depends on the destination zone, \n",
    "writing in the appropriate values for each destination in turn.  \n",
    "We can simply iterate over the\n",
    "zones, which is a little bit slow but easy to code.  This isn't a big \n",
    "deal, as generating the logsums only needs to be done once after the \n",
    "mode choice model is finalized."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "for destination_i, dtaz in enumerate(logsums.columns):\n",
    "    \n",
    "    # Get the LOS data for this destination\n",
    "    new_data = skims.get_rc_dataframe(\n",
    "        raw.HOMETAZi, destination_i,\n",
    "    )\n",
    "    \n",
    "    # Write this data into the model's dataservice,\n",
    "    # overwriting the existing values.\n",
    "    dfs.data_co[new_data.columns] = new_data\n",
    "    \n",
    "    # Run the pre-processing to create the arrays \n",
    "    # needed for computation.\n",
    "    m.load_data()\n",
    "    \n",
    "    # Lastly, compute the logsums and save them\n",
    "    # to the new DataFrame.\n",
    "    logsums[dtaz] = m.logsums()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can review some of the output to make sure it appears reasonable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>TAZ_ID</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>...</th>\n",
       "      <th>31</th>\n",
       "      <th>32</th>\n",
       "      <th>33</th>\n",
       "      <th>34</th>\n",
       "      <th>35</th>\n",
       "      <th>36</th>\n",
       "      <th>37</th>\n",
       "      <th>38</th>\n",
       "      <th>39</th>\n",
       "      <th>40</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-2.935713</td>\n",
       "      <td>-2.660536</td>\n",
       "      <td>-1.745670</td>\n",
       "      <td>-2.229338</td>\n",
       "      <td>-2.403182</td>\n",
       "      <td>-1.624226</td>\n",
       "      <td>-2.689859</td>\n",
       "      <td>-2.704618</td>\n",
       "      <td>-3.258728</td>\n",
       "      <td>-2.718739</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.702316</td>\n",
       "      <td>-1.717786</td>\n",
       "      <td>-2.340960</td>\n",
       "      <td>-2.760617</td>\n",
       "      <td>-1.029280</td>\n",
       "      <td>-2.249790</td>\n",
       "      <td>-2.048407</td>\n",
       "      <td>-2.160306</td>\n",
       "      <td>-2.286868</td>\n",
       "      <td>-1.959773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-2.935713</td>\n",
       "      <td>-2.660536</td>\n",
       "      <td>-1.745670</td>\n",
       "      <td>-2.229338</td>\n",
       "      <td>-2.403182</td>\n",
       "      <td>-1.624226</td>\n",
       "      <td>-2.689859</td>\n",
       "      <td>-2.704618</td>\n",
       "      <td>-3.258728</td>\n",
       "      <td>-2.718739</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.702316</td>\n",
       "      <td>-1.717786</td>\n",
       "      <td>-2.340960</td>\n",
       "      <td>-2.760617</td>\n",
       "      <td>-1.029280</td>\n",
       "      <td>-2.249790</td>\n",
       "      <td>-2.048407</td>\n",
       "      <td>-2.160306</td>\n",
       "      <td>-2.286868</td>\n",
       "      <td>-1.959773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-2.935713</td>\n",
       "      <td>-2.660536</td>\n",
       "      <td>-1.745670</td>\n",
       "      <td>-2.229338</td>\n",
       "      <td>-2.403182</td>\n",
       "      <td>-1.624226</td>\n",
       "      <td>-2.689859</td>\n",
       "      <td>-2.704618</td>\n",
       "      <td>-3.258728</td>\n",
       "      <td>-2.718739</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.702316</td>\n",
       "      <td>-1.717786</td>\n",
       "      <td>-2.340960</td>\n",
       "      <td>-2.760617</td>\n",
       "      <td>-1.029280</td>\n",
       "      <td>-2.249790</td>\n",
       "      <td>-2.048407</td>\n",
       "      <td>-2.160306</td>\n",
       "      <td>-2.286868</td>\n",
       "      <td>-1.959773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>-3.046216</td>\n",
       "      <td>-2.770092</td>\n",
       "      <td>-1.823420</td>\n",
       "      <td>-2.320433</td>\n",
       "      <td>-2.494165</td>\n",
       "      <td>-1.705379</td>\n",
       "      <td>-2.785956</td>\n",
       "      <td>-2.806232</td>\n",
       "      <td>-3.365641</td>\n",
       "      <td>-2.831113</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.784256</td>\n",
       "      <td>-1.797553</td>\n",
       "      <td>-2.430906</td>\n",
       "      <td>-2.863390</td>\n",
       "      <td>-1.100512</td>\n",
       "      <td>-2.343775</td>\n",
       "      <td>-2.133362</td>\n",
       "      <td>-2.247115</td>\n",
       "      <td>-2.380724</td>\n",
       "      <td>-2.047770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>-3.051758</td>\n",
       "      <td>-2.775558</td>\n",
       "      <td>-1.827227</td>\n",
       "      <td>-2.324878</td>\n",
       "      <td>-2.498529</td>\n",
       "      <td>-1.709190</td>\n",
       "      <td>-2.790614</td>\n",
       "      <td>-2.811234</td>\n",
       "      <td>-3.370947</td>\n",
       "      <td>-2.836754</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.788103</td>\n",
       "      <td>-1.801300</td>\n",
       "      <td>-2.435210</td>\n",
       "      <td>-2.868381</td>\n",
       "      <td>-1.103854</td>\n",
       "      <td>-2.348454</td>\n",
       "      <td>-2.137388</td>\n",
       "      <td>-2.251244</td>\n",
       "      <td>-2.385223</td>\n",
       "      <td>-2.052071</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "TAZ_ID        1         2         3         4         5         6         7   \\\n",
       "0      -2.935713 -2.660536 -1.745670 -2.229338 -2.403182 -1.624226 -2.689859   \n",
       "1      -2.935713 -2.660536 -1.745670 -2.229338 -2.403182 -1.624226 -2.689859   \n",
       "3      -2.935713 -2.660536 -1.745670 -2.229338 -2.403182 -1.624226 -2.689859   \n",
       "7      -3.046216 -2.770092 -1.823420 -2.320433 -2.494165 -1.705379 -2.785956   \n",
       "10     -3.051758 -2.775558 -1.827227 -2.324878 -2.498529 -1.709190 -2.790614   \n",
       "\n",
       "TAZ_ID        8         9         10  ...        31        32        33  \\\n",
       "0      -2.704618 -3.258728 -2.718739  ... -1.702316 -1.717786 -2.340960   \n",
       "1      -2.704618 -3.258728 -2.718739  ... -1.702316 -1.717786 -2.340960   \n",
       "3      -2.704618 -3.258728 -2.718739  ... -1.702316 -1.717786 -2.340960   \n",
       "7      -2.806232 -3.365641 -2.831113  ... -1.784256 -1.797553 -2.430906   \n",
       "10     -2.811234 -3.370947 -2.836754  ... -1.788103 -1.801300 -2.435210   \n",
       "\n",
       "TAZ_ID        34        35        36        37        38        39        40  \n",
       "0      -2.760617 -1.029280 -2.249790 -2.048407 -2.160306 -2.286868 -1.959773  \n",
       "1      -2.760617 -1.029280 -2.249790 -2.048407 -2.160306 -2.286868 -1.959773  \n",
       "3      -2.760617 -1.029280 -2.249790 -2.048407 -2.160306 -2.286868 -1.959773  \n",
       "7      -2.863390 -1.100512 -2.343775 -2.133362 -2.247115 -2.380724 -2.047770  \n",
       "10     -2.868381 -1.103854 -2.348454 -2.137388 -2.251244 -2.385223 -2.052071  \n",
       "\n",
       "[5 rows x 40 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logsums.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we can persist the logsums dataframe to disk, for use in the next\n",
    "example, where we will estimate a destination choice model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "logsums.to_pickle('/tmp/logsums.pkl.gz')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
