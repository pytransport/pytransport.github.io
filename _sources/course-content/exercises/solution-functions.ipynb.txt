{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Questions\n",
    "\n",
    "1. Write a function that accepts an integer number of alligators as an input,\n",
    "   and returns a string describing that number of alligators.\n",
    "2. Write a function that accepts an arbitrary number of integers, adds them\n",
    "   together, and reports on that number of alligators (using the function\n",
    "   you wrote in the first part).\n",
    "3. Write a function that converts a list of traffic counts into a list of\n",
    "   traveler counts, including an optional automobile occupancy argument that\n",
    "   defaults to 1.1 if not otherwise given."
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Solution"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-03T23:04:54.342989Z",
     "start_time": "2020-04-03T23:04:54.339321Z"
    }
   },
   "outputs": [],
   "source": [
    "def alligators(n):\n",
    "    if n == 1: \n",
    "        return \"One alligator is a nuisance.\"\n",
    "    elif n < 4:\n",
    "        return f\"{n} alligators are a problem.\"\n",
    "    elif n <= 0:\n",
    "        return \"No alligators here.\"\n",
    "    else:\n",
    "        return f\"{n} alligators are a big problem.\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-03T23:04:54.354430Z",
     "start_time": "2020-04-03T23:04:54.345291Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'One alligator is a nuisance.'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alligators(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-03T23:04:54.360705Z",
     "start_time": "2020-04-03T23:04:54.357091Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2 alligators are a problem.'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alligators(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-03T23:04:54.366476Z",
     "start_time": "2020-04-03T23:04:54.363004Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'99 alligators are a big problem.'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alligators(99)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-03T23:04:54.371010Z",
     "start_time": "2020-04-03T23:04:54.368185Z"
    }
   },
   "outputs": [],
   "source": [
    "def many_alligators(*args):\n",
    "    n = 0\n",
    "    for a in args:\n",
    "        n += a\n",
    "    return alligators(n)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-03T23:04:54.376178Z",
     "start_time": "2020-04-03T23:04:54.372754Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'10 alligators are a big problem.'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "many_alligators(1,2,3,4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-03T23:04:54.380624Z",
     "start_time": "2020-04-03T23:04:54.377689Z"
    }
   },
   "outputs": [],
   "source": [
    "def passenger_counts(traffic_counts, occupancy=1.1):\n",
    "    result = []\n",
    "    for t in traffic_counts:\n",
    "        result.append(t * occupancy)\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-03T23:04:54.386754Z",
     "start_time": "2020-04-03T23:04:54.383634Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[88.0, 66.0, 133.10000000000002]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "traffic = [80, 60, 121]\n",
    "passenger_counts(traffic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-03T23:04:54.391397Z",
     "start_time": "2020-04-03T23:04:54.388442Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[96.0, 72.0, 145.2]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "passenger_counts(traffic, occupancy=1.2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
