{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear Regression\n",
    "\n",
    "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/jpn--/python-for-transportation-modeling/blob/master/course-content/tabular-analysis/linear-regression.ipynb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.133797Z",
     "start_time": "2022-05-31T19:05:58.132864Z"
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A popular package for developing linear regression models in Python\n",
    "is `statsmodels`.  This packages includes an extensive set of tools\n",
    "for statisitical modeling, but in this tutorial we will focus on \n",
    "linear regression models.\n",
    "\n",
    "Generally, linear regression models will be developed using a \n",
    "`pandas.DataFrame` containing both independent (explanatory) and \n",
    "dependent (target) variables.  We'll work with data in the \n",
    "households and trips table from the Jupiter study area."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.157145Z",
     "start_time": "2022-05-31T19:05:59.135828Z"
    }
   },
   "outputs": [],
   "source": [
    "def data_url(filename):\n",
    "    url = \"https://github.com/jpn--/python-for-transportation-modeling/raw/master/example-package/transportation_tutorials/data/\"\n",
    "    return url + filename\n",
    "    \n",
    "def get_data(filename):\n",
    "    if not os.path.isfile(filename):\n",
    "        import urllib.request\n",
    "        urllib.request.urlretrieve(data_url(filename), filename)\n",
    "    return filename\n",
    "\n",
    "hh = pd.read_csv(get_data('SERPM8-BASE2015-HOUSEHOLDS.csv.gz'), index_col=0)\n",
    "hh.set_index('hh_id', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.357744Z",
     "start_time": "2022-05-31T19:05:59.158663Z"
    }
   },
   "outputs": [],
   "source": [
    "trips = pd.read_csv(get_data('SERPM8-BASE2015-TRIPS.csv.gz'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we want to develop a linear regression model to predict trip generation\n",
    "by households, we'll need to merge these two data tables, tabulating the number\n",
    "of trips taken by each household. (See the tutorial on \n",
    "[grouping](./basic-analysis-with-pandas.html#Grouping) for more details on how\n",
    "to do this)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.371760Z",
     "start_time": "2022-05-31T19:05:59.360606Z"
    }
   },
   "outputs": [],
   "source": [
    "hh = hh.merge(\n",
    "    trips.groupby(['hh_id']).size().rename('n_trips'), \n",
    "    left_on=['hh_id'], \n",
    "    right_index=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can review what variables we now have in the `hh` DataFrame:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.383954Z",
     "start_time": "2022-05-31T19:05:59.373272Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 17260 entries, 1690841 to 1726370\n",
      "Data columns (total 9 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   home_mgra     17260 non-null  int64 \n",
      " 1   income        17260 non-null  int64 \n",
      " 2   autos         17260 non-null  int64 \n",
      " 3   transponder   17260 non-null  int64 \n",
      " 4   cdap_pattern  17260 non-null  object\n",
      " 5   jtf_choice    17260 non-null  int64 \n",
      " 6   autotech      17260 non-null  int64 \n",
      " 7   tncmemb       17260 non-null  int64 \n",
      " 8   n_trips       17260 non-null  int64 \n",
      "dtypes: int64(8), object(1)\n",
      "memory usage: 1.3+ MB\n"
     ]
    }
   ],
   "source": [
    "hh.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we suppose that the number of trips made by a household is \n",
    "a function of income and the number of automobiles owned, we can\n",
    "create an ordinary least squares regression model, and find the \n",
    "best fitting parameters like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.401894Z",
     "start_time": "2022-05-31T19:05:59.385281Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                n_trips   R-squared:                       0.229\n",
      "Model:                            OLS   Adj. R-squared:                  0.229\n",
      "Method:                 Least Squares   F-statistic:                     2563.\n",
      "Date:                Tue, 31 May 2022   Prob (F-statistic):               0.00\n",
      "Time:                        14:05:59   Log-Likelihood:                -48167.\n",
      "No. Observations:               17260   AIC:                         9.634e+04\n",
      "Df Residuals:                   17257   BIC:                         9.636e+04\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          2.4460      0.073     33.694      0.000       2.304       2.588\n",
      "autos          2.5804      0.039     65.547      0.000       2.503       2.658\n",
      "income       1.97e-06   2.79e-07      7.049      0.000    1.42e-06    2.52e-06\n",
      "==============================================================================\n",
      "Omnibus:                     4116.620   Durbin-Watson:                   1.926\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            11185.853\n",
      "Skew:                           1.273   Prob(JB):                         0.00\n",
      "Kurtosis:                       6.011   Cond. No.                     4.14e+05\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 4.14e+05. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "mod = sm.OLS(\n",
    "    hh.n_trips, \n",
    "    sm.add_constant(hh[['autos','income']])\n",
    ")\n",
    "res = mod.fit()\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the `hh` dataframes contains a variety of other columns of data, but\n",
    "since we're not interested in using them for this model, they can be implicitly \n",
    "omitted by creating a dataframe view that includes only the variables we do want.\n",
    "\n",
    "Also, we use `sm.add_constant`, which includes a constant in the regression\n",
    "function.  By default, the `statsmodels` module does *not* include a constant\n",
    "in an ordinary least squares (OLS) model, so you must explicitly add one \n",
    "to the explanatory variables to include it.\n",
    "\n",
    "The output of the model `summary()` is relatively extensive and includes a \n",
    "large number of statistical measures and tests that may or may not interest\n",
    "you.  The most important of these measures include the coefficient estimates\n",
    "shown in the center panel of this report, as well as the R-squared measure at\n",
    "the upper right.\n",
    "\n",
    "One other item that may be concerning in this report is the second warning at\n",
    "the bottom, which reports that there may be some numerical problem with the model.\n",
    "This problem is actually reflected also in the coefficients themselves, as the \n",
    "coefficient for income is many orders of magnitide different from the others.  \n",
    "This is reasonable and intuititve: the impact of a unit (single dollar) change in annual\n",
    "household income is insignificant compared to a unit (single car) change in\n",
    "automobile ownership.  If we review the standard deviations of these explanatory\n",
    "variables, we can also see they vary greatly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.418414Z",
     "start_time": "2022-05-31T19:05:59.403978Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "const          0.000000\n",
       "autos          0.801841\n",
       "income    112974.383573\n",
       "dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sm.add_constant(hh[['autos','income']]).std()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A magnitude variance this large is not problematic in raw statistical theory,\n",
    "but it can introduce numerical stability problems when using computers to \n",
    "represent these models.  To solve this issue, we can simply scale one or more \n",
    "variables to more consistent variance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.423433Z",
     "start_time": "2022-05-31T19:05:59.420289Z"
    }
   },
   "outputs": [],
   "source": [
    "hh['income_100k'] = hh.income / 100_000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.443468Z",
     "start_time": "2022-05-31T19:05:59.425404Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                n_trips   R-squared:                       0.229\n",
      "Model:                            OLS   Adj. R-squared:                  0.229\n",
      "Method:                 Least Squares   F-statistic:                     2563.\n",
      "Date:                Tue, 31 May 2022   Prob (F-statistic):               0.00\n",
      "Time:                        14:05:59   Log-Likelihood:                -48167.\n",
      "No. Observations:               17260   AIC:                         9.634e+04\n",
      "Df Residuals:                   17257   BIC:                         9.636e+04\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===============================================================================\n",
      "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------\n",
      "const           2.4460      0.073     33.694      0.000       2.304       2.588\n",
      "autos           2.5804      0.039     65.547      0.000       2.503       2.658\n",
      "income_100k     0.1970      0.028      7.049      0.000       0.142       0.252\n",
      "==============================================================================\n",
      "Omnibus:                     4116.620   Durbin-Watson:                   1.926\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            11185.853\n",
      "Skew:                           1.273   Prob(JB):                         0.00\n",
      "Kurtosis:                       6.011   Cond. No.                         6.60\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "mod = sm.OLS(\n",
    "    hh.n_trips, \n",
    "    sm.add_constant(hh[['autos','income_100k']])\n",
    ")\n",
    "res = mod.fit()\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The R-squared and t-statistics of this model are the same as before,\n",
    "as this is in effect the same model as above.  But in this revised model, the\n",
    "magnitude of the income coefficient is now much closer to that of the other\n",
    "coefficients, and the \"condition number\" warning is not present in the summary."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Piecewise Linear Functions\n",
    "\n",
    "OLS linear regression models are by design written as linear-in-parameters\n",
    "models, but that does not mean that the explanitory data cannot be first\n",
    "transformed, for example by using a piece-wise linear expansion.  We can expand a single\n",
    "column of data in a pandas.DataFrame into multiple columns based on defined\n",
    "breakpoints, for example like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.460949Z",
     "start_time": "2022-05-31T19:05:59.448438Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>income_to_25k</th>\n",
       "      <th>income_25k_to_75k</th>\n",
       "      <th>income_75k_and_up</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hh_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1690841</th>\n",
       "      <td>25000</td>\n",
       "      <td>50000</td>\n",
       "      <td>437000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1690961</th>\n",
       "      <td>25000</td>\n",
       "      <td>2500</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1690866</th>\n",
       "      <td>25000</td>\n",
       "      <td>50000</td>\n",
       "      <td>75000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1690895</th>\n",
       "      <td>25000</td>\n",
       "      <td>50000</td>\n",
       "      <td>29000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1690933</th>\n",
       "      <td>25000</td>\n",
       "      <td>50000</td>\n",
       "      <td>20000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         income_to_25k  income_25k_to_75k  income_75k_and_up\n",
       "hh_id                                                       \n",
       "1690841          25000              50000             437000\n",
       "1690961          25000               2500                  0\n",
       "1690866          25000              50000              75000\n",
       "1690895          25000              50000              29000\n",
       "1690933          25000              50000              20000"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "piecewise_income = pd.DataFrame({ \n",
    "    'income_to_25k': hh.income.clip(None, 25_000),\n",
    "    'income_25k_to_75k': hh.income.clip(25_000, 75_000) - 25_000,\n",
    "    'income_75k_and_up': hh.income.clip(75_000) - 75_000,\n",
    "})\n",
    "piecewise_income.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The result is three columns of data instead of one, with the first giving \n",
    "income up to the lower breakpoint, the next giving income between the \n",
    "two breakpoints, and the last giving the amount of income above the\n",
    "top breakpoint.\n",
    "\n",
    "We can readily concatenate this expanded data with any other explanatory \n",
    "variables by using `pandas.concat`.  Note that by default this function\n",
    "concatenates dataframes vertically (combining columns and stacking rows), \n",
    "but in this case we want to concatenate horizontally (combining rows and\n",
    "stacking columns).  We can achieve this by also passing `axis=1` to the\n",
    "function in addition to the list of dataframes to concatenate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.471864Z",
     "start_time": "2022-05-31T19:05:59.462824Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>autos</th>\n",
       "      <th>income_to_25k</th>\n",
       "      <th>income_25k_to_75k</th>\n",
       "      <th>income_75k_and_up</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hh_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1690841</th>\n",
       "      <td>2</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.500</td>\n",
       "      <td>4.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1690961</th>\n",
       "      <td>1</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.025</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1690866</th>\n",
       "      <td>2</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1690895</th>\n",
       "      <td>2</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1690933</th>\n",
       "      <td>2</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.500</td>\n",
       "      <td>0.20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         autos  income_to_25k  income_25k_to_75k  income_75k_and_up\n",
       "hh_id                                                              \n",
       "1690841      2           0.25              0.500               4.37\n",
       "1690961      1           0.25              0.025               0.00\n",
       "1690866      2           0.25              0.500               0.75\n",
       "1690895      2           0.25              0.500               0.29\n",
       "1690933      2           0.25              0.500               0.20"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh_edited = pd.concat([\n",
    "    hh.autos,\n",
    "    piecewise_income / 100_000,\n",
    "], axis=1)\n",
    "\n",
    "hh_edited.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we can use this modified dataframe to construct a piecewise linear OLS regression model.\n",
    "Because the original and modified dataframes have the same index (i.e. number and order of rows)\n",
    "we can mix them in the OLS defintion, using the `n_trips` column from the original as the dependent \n",
    "variable and the explanatory data from the modified dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.491400Z",
     "start_time": "2022-05-31T19:05:59.474019Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                n_trips   R-squared:                       0.231\n",
      "Model:                            OLS   Adj. R-squared:                  0.231\n",
      "Method:                 Least Squares   F-statistic:                     1297.\n",
      "Date:                Tue, 31 May 2022   Prob (F-statistic):               0.00\n",
      "Time:                        14:05:59   Log-Likelihood:                -48143.\n",
      "No. Observations:               17260   AIC:                         9.630e+04\n",
      "Df Residuals:                   17255   BIC:                         9.633e+04\n",
      "Df Model:                           4                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=====================================================================================\n",
      "                        coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------------\n",
      "const                 1.9177      0.153     12.542      0.000       1.618       2.217\n",
      "autos                 2.4769      0.042     58.560      0.000       2.394       2.560\n",
      "income_to_25k         2.2983      0.722      3.181      0.001       0.882       3.714\n",
      "income_25k_to_75k     1.0124      0.204      4.972      0.000       0.613       1.412\n",
      "income_75k_and_up     0.0977      0.033      3.002      0.003       0.034       0.162\n",
      "==============================================================================\n",
      "Omnibus:                     4132.769   Durbin-Watson:                   1.925\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            11235.615\n",
      "Skew:                           1.278   Prob(JB):                         0.00\n",
      "Kurtosis:                       6.015   Cond. No.                         56.0\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "mod = sm.OLS(\n",
    "    hh.n_trips, \n",
    "    sm.add_constant(hh_edited)\n",
    ")\n",
    "res = mod.fit()\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Polynomial Functions\n",
    "\n",
    "In addition to piecewise linear terms in the regression equation, \n",
    "standard OLS allows for any arbitrary non-linear transformation.\n",
    "Students of statistics will be familiar with fitting a polynomial\n",
    "function with OLS coefficients, and this can be done using `statsmodels`\n",
    "for example by explicitly computing the desired polynomial terms\n",
    "before estimating model parameter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.497793Z",
     "start_time": "2022-05-31T19:05:59.493613Z"
    }
   },
   "outputs": [],
   "source": [
    "hh['autos^2'] = hh['autos'] ** 2\n",
    "hh['income^2'] = hh['income_100k'] ** 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.518195Z",
     "start_time": "2022-05-31T19:05:59.499340Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                n_trips   R-squared:                       0.230\n",
      "Model:                            OLS   Adj. R-squared:                  0.229\n",
      "Method:                 Least Squares   F-statistic:                     1286.\n",
      "Date:                Tue, 31 May 2022   Prob (F-statistic):               0.00\n",
      "Time:                        14:05:59   Log-Likelihood:                -48160.\n",
      "No. Observations:               17260   AIC:                         9.633e+04\n",
      "Df Residuals:                   17255   BIC:                         9.637e+04\n",
      "Df Model:                           4                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===============================================================================\n",
      "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------\n",
      "const           2.6596      0.127     20.926      0.000       2.411       2.909\n",
      "autos           2.2161      0.139     15.970      0.000       1.944       2.488\n",
      "income_100k     0.3748      0.067      5.578      0.000       0.243       0.507\n",
      "autos^2         0.0839      0.033      2.545      0.011       0.019       0.148\n",
      "income^2       -0.0314      0.011     -2.788      0.005      -0.054      -0.009\n",
      "==============================================================================\n",
      "Omnibus:                     4098.383   Durbin-Watson:                   1.925\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            11134.434\n",
      "Skew:                           1.268   Prob(JB):                         0.00\n",
      "Kurtosis:                       6.009   Cond. No.                         46.6\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "mod = sm.OLS(\n",
    "    hh.n_trips, \n",
    "    sm.add_constant(hh[['autos','income_100k', 'autos^2', 'income^2']])\n",
    ")\n",
    "res = mod.fit()\n",
    "print(res.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, polynomial terms can be created automatically for every \n",
    "column in the source data, as well as for interactions, using \n",
    "the `PolynomialFeatures` preprocessor from the `sklearn` package.\n",
    "This tool doesn't automatically maintain the DataFrame formatting\n",
    "when applied (instead it outputs a simple array of values), \n",
    "but it is simple to write a small function that will do so."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.523479Z",
     "start_time": "2022-05-31T19:05:59.520123Z"
    }
   },
   "outputs": [],
   "source": [
    "def polynomial(x, **kwargs):\n",
    "    from sklearn.preprocessing import PolynomialFeatures\n",
    "    poly = PolynomialFeatures(**kwargs)\n",
    "    arr = poly.fit_transform(x)\n",
    "    return pd.DataFrame(arr, columns=poly.get_feature_names_out(x.columns), index=x.index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we can use the function to calculate polynomial terms automatically. \n",
    "In this example, by setting the `degree` to 3, we not only get squared and \n",
    "cubed versions of the two parameters, but also all the interactions of these\n",
    "parameters up to degree 3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.574228Z",
     "start_time": "2022-05-31T19:05:59.525794Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>autos</th>\n",
       "      <th>income_100k</th>\n",
       "      <th>autos^2</th>\n",
       "      <th>autos income_100k</th>\n",
       "      <th>income_100k^2</th>\n",
       "      <th>autos^3</th>\n",
       "      <th>autos^2 income_100k</th>\n",
       "      <th>autos income_100k^2</th>\n",
       "      <th>income_100k^3</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hh_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1690841</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5.120</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10.240</td>\n",
       "      <td>26.214400</td>\n",
       "      <td>8.0</td>\n",
       "      <td>20.480</td>\n",
       "      <td>52.428800</td>\n",
       "      <td>134.217728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1690961</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.275</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.275</td>\n",
       "      <td>0.075625</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.275</td>\n",
       "      <td>0.075625</td>\n",
       "      <td>0.020797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1690866</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.500</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.000</td>\n",
       "      <td>2.250000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>6.000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>3.375000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1690895</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.040</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.080</td>\n",
       "      <td>1.081600</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4.160</td>\n",
       "      <td>2.163200</td>\n",
       "      <td>1.124864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1690933</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.950</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.900</td>\n",
       "      <td>0.902500</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3.800</td>\n",
       "      <td>1.805000</td>\n",
       "      <td>0.857375</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           1  autos  income_100k  autos^2  autos income_100k  income_100k^2  \\\n",
       "hh_id                                                                         \n",
       "1690841  1.0    2.0        5.120      4.0             10.240      26.214400   \n",
       "1690961  1.0    1.0        0.275      1.0              0.275       0.075625   \n",
       "1690866  1.0    2.0        1.500      4.0              3.000       2.250000   \n",
       "1690895  1.0    2.0        1.040      4.0              2.080       1.081600   \n",
       "1690933  1.0    2.0        0.950      4.0              1.900       0.902500   \n",
       "\n",
       "         autos^3  autos^2 income_100k  autos income_100k^2  income_100k^3  \n",
       "hh_id                                                                      \n",
       "1690841      8.0               20.480            52.428800     134.217728  \n",
       "1690961      1.0                0.275             0.075625       0.020797  \n",
       "1690866      8.0                6.000             4.500000       3.375000  \n",
       "1690895      8.0                4.160             2.163200       1.124864  \n",
       "1690933      8.0                3.800             1.805000       0.857375  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh_poly = polynomial(hh[['autos','income_100k']], degree=3)\n",
    "hh_poly.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great care should be used with this automatic polynomial expansion of the data, \n",
    "as it is easy to end up with an overfitted model, especially when using a tool\n",
    "like OLS that does not attempt to self-correct to limit overfitting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-05-31T19:05:59.594403Z",
     "start_time": "2022-05-31T19:05:59.576356Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                n_trips   R-squared:                       0.236\n",
      "Model:                            OLS   Adj. R-squared:                  0.235\n",
      "Method:                 Least Squares   F-statistic:                     590.5\n",
      "Date:                Tue, 31 May 2022   Prob (F-statistic):               0.00\n",
      "Time:                        14:05:59   Log-Likelihood:                -48093.\n",
      "No. Observations:               17260   AIC:                         9.621e+04\n",
      "Df Residuals:                   17250   BIC:                         9.628e+04\n",
      "Df Model:                           9                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "1                       3.6606      0.192     19.086      0.000       3.285       4.037\n",
      "autos                  -0.1241      0.321     -0.386      0.699      -0.754       0.506\n",
      "income_100k             0.6579      0.223      2.955      0.003       0.222       1.094\n",
      "autos^2                 1.2151      0.178      6.828      0.000       0.866       1.564\n",
      "autos income_100k       0.5617      0.182      3.088      0.002       0.205       0.918\n",
      "income_100k^2          -0.3633      0.052     -6.984      0.000      -0.465      -0.261\n",
      "autos^3                -0.1641      0.030     -5.515      0.000      -0.222      -0.106\n",
      "autos^2 income_100k    -0.1079      0.039     -2.790      0.005      -0.184      -0.032\n",
      "autos income_100k^2    -0.0216      0.016     -1.337      0.181      -0.053       0.010\n",
      "income_100k^3           0.0349      0.004      8.257      0.000       0.027       0.043\n",
      "==============================================================================\n",
      "Omnibus:                     4055.002   Durbin-Watson:                   1.926\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            10960.315\n",
      "Skew:                           1.257   Prob(JB):                         0.00\n",
      "Kurtosis:                       5.987   Cond. No.                         659.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "mod = sm.OLS(\n",
    "    hh.n_trips, \n",
    "    hh_poly\n",
    ")\n",
    "res = mod.fit()\n",
    "print(res.summary())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
